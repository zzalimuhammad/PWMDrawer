
PWMDrawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000025e  00800060  000015a4  00001638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008002be  008002be  00001896  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001896  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d9  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a09  00000000  00000000  00002cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a53  00000000  00000000  000036d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00004128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  00004388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1b  00000000  00000000  00004885  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000054a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <main>
      8a:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PWM_Drawer_external_init>:

/* if u use external PWM Signal Source use this function to initiation the APP */

void PWM_Drawer_external_init(void)
{
	GLCD_Init();
      92:	0e 94 4b 01 	call	0x296	; 0x296 <GLCD_Init>
	GLCD_ClearAll();
      96:	0e 94 80 01 	call	0x300	; 0x300 <GLCD_ClearAll>
      9a:	08 95       	ret

0000009c <PWM_Draw_Signal>:
}

/* Use this Function to Draw a Signal Waveform anywise intrenal or external */

void PWM_Draw_Signal(void)
{
      9c:	8f 92       	push	r8
      9e:	9f 92       	push	r9
      a0:	af 92       	push	r10
      a2:	bf 92       	push	r11
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	e7 97       	sbiw	r28, 0x37	; 55
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	f8 94       	cli
      be:	de bf       	out	0x3e, r29	; 62
      c0:	0f be       	out	0x3f, r0	; 63
      c2:	cd bf       	out	0x3d, r28	; 61
	int pereidon=0; 
	int pereidoff=0;
	/* Start time arrow */
	
	char arrow[15]={0};
      c4:	fe 01       	movw	r30, r28
      c6:	31 96       	adiw	r30, 0x01	; 1
      c8:	8f e0       	ldi	r24, 0x0F	; 15
      ca:	df 01       	movw	r26, r30
      cc:	1d 92       	st	X+, r1
      ce:	8a 95       	dec	r24
      d0:	e9 f7       	brne	.-6      	; 0xcc <PWM_Draw_Signal+0x30>
	strcat(arrow,"$"); // left arrow 
      d2:	01 90       	ld	r0, Z+
      d4:	00 20       	and	r0, r0
      d6:	e9 f7       	brne	.-6      	; 0xd2 <PWM_Draw_Signal+0x36>
      d8:	31 97       	sbiw	r30, 0x01	; 1
      da:	84 e2       	ldi	r24, 0x24	; 36
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	91 83       	std	Z+1, r25	; 0x01
      e0:	80 83       	st	Z, r24

	
	
	/* Start square wave */
	char pulse [40];
	strcat(pulse,"&");	//rising edge
      e2:	fe 01       	movw	r30, r28
      e4:	70 96       	adiw	r30, 0x10	; 16
      e6:	01 90       	ld	r0, Z+
      e8:	00 20       	and	r0, r0
      ea:	e9 f7       	brne	.-6      	; 0xe6 <PWM_Draw_Signal+0x4a>
      ec:	31 97       	sbiw	r30, 0x01	; 1
      ee:	86 e2       	ldi	r24, 0x26	; 38
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	91 83       	std	Z+1, r25	; 0x01
      f4:	80 83       	st	Z, r24
	
	
	
	/* This loop in order to Generate the waves 
	is completely synchronized with the duty and the time of on and off */
	for (u32 i = 0;i<2;i++)
      f6:	81 2c       	mov	r8, r1
      f8:	91 2c       	mov	r9, r1
      fa:	54 01       	movw	r10, r8
/* Use this Function to Draw a Signal Waveform anywise intrenal or external */

void PWM_Draw_Signal(void)
{
	int pereidon=0; 
	int pereidoff=0;
      fc:	e0 e0       	ldi	r30, 0x00	; 0
      fe:	f0 e0       	ldi	r31, 0x00	; 0

/* Use this Function to Draw a Signal Waveform anywise intrenal or external */

void PWM_Draw_Signal(void)
{
	int pereidon=0; 
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	10 e0       	ldi	r17, 0x00	; 0
	
	
	
	/* This loop in order to Generate the waves 
	is completely synchronized with the duty and the time of on and off */
	for (u32 i = 0;i<2;i++)
     104:	68 c0       	rjmp	.+208    	; 0x1d6 <PWM_Draw_Signal+0x13a>
	{
		for (u32 j=0;j<(duty/10);j++)
		{
			strcat(pulse,"'");	//on time
     106:	de 01       	movw	r26, r28
     108:	50 96       	adiw	r26, 0x10	; 16
     10a:	0d 90       	ld	r0, X+
     10c:	00 20       	and	r0, r0
     10e:	e9 f7       	brne	.-6      	; 0x10a <PWM_Draw_Signal+0x6e>
     110:	11 97       	sbiw	r26, 0x01	; 1
     112:	87 e2       	ldi	r24, 0x27	; 39
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	8d 93       	st	X+, r24
     118:	9c 93       	st	X, r25
			pereidon++;
     11a:	0f 5f       	subi	r16, 0xFF	; 255
     11c:	1f 4f       	sbci	r17, 0xFF	; 255
	
	/* This loop in order to Generate the waves 
	is completely synchronized with the duty and the time of on and off */
	for (u32 i = 0;i<2;i++)
	{
		for (u32 j=0;j<(duty/10);j++)
     11e:	bf ef       	ldi	r27, 0xFF	; 255
     120:	cb 1a       	sub	r12, r27
     122:	db 0a       	sbc	r13, r27
     124:	eb 0a       	sbc	r14, r27
     126:	fb 0a       	sbc	r15, r27
     128:	03 c0       	rjmp	.+6      	; 0x130 <PWM_Draw_Signal+0x94>
     12a:	c1 2c       	mov	r12, r1
     12c:	d1 2c       	mov	r13, r1
     12e:	76 01       	movw	r14, r12
     130:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__data_end>
     134:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <__data_end+0x1>
     138:	6a e0       	ldi	r22, 0x0A	; 10
     13a:	70 e0       	ldi	r23, 0x00	; 0
     13c:	0e 94 50 07 	call	0xea0	; 0xea0 <__divmodhi4>
     140:	cb 01       	movw	r24, r22
     142:	77 0f       	add	r23, r23
     144:	aa 0b       	sbc	r26, r26
     146:	bb 0b       	sbc	r27, r27
     148:	c8 16       	cp	r12, r24
     14a:	d9 06       	cpc	r13, r25
     14c:	ea 06       	cpc	r14, r26
     14e:	fb 06       	cpc	r15, r27
     150:	d0 f2       	brcs	.-76     	; 0x106 <PWM_Draw_Signal+0x6a>
		{
			strcat(pulse,"'");	//on time
			pereidon++;
		}
		strcat(pulse,")");	//falling edge
     152:	de 01       	movw	r26, r28
     154:	50 96       	adiw	r26, 0x10	; 16
     156:	0d 90       	ld	r0, X+
     158:	00 20       	and	r0, r0
     15a:	e9 f7       	brne	.-6      	; 0x156 <PWM_Draw_Signal+0xba>
     15c:	11 97       	sbiw	r26, 0x01	; 1
     15e:	89 e2       	ldi	r24, 0x29	; 41
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	8d 93       	st	X+, r24
     164:	9c 93       	st	X, r25
		for (u32 k=0;k<(10-(duty/10));k++)
     166:	c1 2c       	mov	r12, r1
     168:	d1 2c       	mov	r13, r1
     16a:	76 01       	movw	r14, r12
     16c:	10 c0       	rjmp	.+32     	; 0x18e <PWM_Draw_Signal+0xf2>
		{
			strcat(pulse,"("); // off time
     16e:	de 01       	movw	r26, r28
     170:	50 96       	adiw	r26, 0x10	; 16
     172:	0d 90       	ld	r0, X+
     174:	00 20       	and	r0, r0
     176:	e9 f7       	brne	.-6      	; 0x172 <PWM_Draw_Signal+0xd6>
     178:	11 97       	sbiw	r26, 0x01	; 1
     17a:	88 e2       	ldi	r24, 0x28	; 40
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	8d 93       	st	X+, r24
     180:	9c 93       	st	X, r25
			pereidoff++;
     182:	31 96       	adiw	r30, 0x01	; 1
		{
			strcat(pulse,"'");	//on time
			pereidon++;
		}
		strcat(pulse,")");	//falling edge
		for (u32 k=0;k<(10-(duty/10));k++)
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	c8 1a       	sub	r12, r24
     188:	d8 0a       	sbc	r13, r24
     18a:	e8 0a       	sbc	r14, r24
     18c:	f8 0a       	sbc	r15, r24
     18e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__data_end>
     192:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <__data_end+0x1>
     196:	2a e0       	ldi	r18, 0x0A	; 10
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	b9 01       	movw	r22, r18
     19c:	0e 94 50 07 	call	0xea0	; 0xea0 <__divmodhi4>
     1a0:	c9 01       	movw	r24, r18
     1a2:	86 1b       	sub	r24, r22
     1a4:	97 0b       	sbc	r25, r23
     1a6:	09 2e       	mov	r0, r25
     1a8:	00 0c       	add	r0, r0
     1aa:	aa 0b       	sbc	r26, r26
     1ac:	bb 0b       	sbc	r27, r27
     1ae:	c8 16       	cp	r12, r24
     1b0:	d9 06       	cpc	r13, r25
     1b2:	ea 06       	cpc	r14, r26
     1b4:	fb 06       	cpc	r15, r27
     1b6:	d8 f2       	brcs	.-74     	; 0x16e <PWM_Draw_Signal+0xd2>
		{
			strcat(pulse,"("); // off time
			pereidoff++;
		}
		strcat(pulse,"&");	// rising edge
     1b8:	de 01       	movw	r26, r28
     1ba:	50 96       	adiw	r26, 0x10	; 16
     1bc:	0d 90       	ld	r0, X+
     1be:	00 20       	and	r0, r0
     1c0:	e9 f7       	brne	.-6      	; 0x1bc <PWM_Draw_Signal+0x120>
     1c2:	11 97       	sbiw	r26, 0x01	; 1
     1c4:	86 e2       	ldi	r24, 0x26	; 38
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	8d 93       	st	X+, r24
     1ca:	9c 93       	st	X, r25
	
	
	
	/* This loop in order to Generate the waves 
	is completely synchronized with the duty and the time of on and off */
	for (u32 i = 0;i<2;i++)
     1cc:	af ef       	ldi	r26, 0xFF	; 255
     1ce:	8a 1a       	sub	r8, r26
     1d0:	9a 0a       	sbc	r9, r26
     1d2:	aa 0a       	sbc	r10, r26
     1d4:	ba 0a       	sbc	r11, r26
     1d6:	b2 e0       	ldi	r27, 0x02	; 2
     1d8:	8b 16       	cp	r8, r27
     1da:	91 04       	cpc	r9, r1
     1dc:	a1 04       	cpc	r10, r1
     1de:	b1 04       	cpc	r11, r1
     1e0:	08 f4       	brcc	.+2      	; 0x1e4 <PWM_Draw_Signal+0x148>
     1e2:	a3 cf       	rjmp	.-186    	; 0x12a <PWM_Draw_Signal+0x8e>
		strcat(pulse,"&");	// rising edge
	}
	
	
	/* This loop made To make the arrow completely in sync with the cycle time */
	for(int i=(pereidon+pereidoff)/2;i>0;i--)
     1e4:	e0 0f       	add	r30, r16
     1e6:	f1 1f       	adc	r31, r17
     1e8:	ff 23       	and	r31, r31
     1ea:	0c f4       	brge	.+2      	; 0x1ee <PWM_Draw_Signal+0x152>
     1ec:	31 96       	adiw	r30, 0x01	; 1
     1ee:	f5 95       	asr	r31
     1f0:	e7 95       	ror	r30
     1f2:	0b c0       	rjmp	.+22     	; 0x20a <PWM_Draw_Signal+0x16e>
	{
		strcat(arrow,"#"); // arrow body
     1f4:	de 01       	movw	r26, r28
     1f6:	11 96       	adiw	r26, 0x01	; 1
     1f8:	0d 90       	ld	r0, X+
     1fa:	00 20       	and	r0, r0
     1fc:	e9 f7       	brne	.-6      	; 0x1f8 <PWM_Draw_Signal+0x15c>
     1fe:	11 97       	sbiw	r26, 0x01	; 1
     200:	83 e2       	ldi	r24, 0x23	; 35
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	8d 93       	st	X+, r24
     206:	9c 93       	st	X, r25
		strcat(pulse,"&");	// rising edge
	}
	
	
	/* This loop made To make the arrow completely in sync with the cycle time */
	for(int i=(pereidon+pereidoff)/2;i>0;i--)
     208:	31 97       	sbiw	r30, 0x01	; 1
     20a:	1e 16       	cp	r1, r30
     20c:	1f 06       	cpc	r1, r31
     20e:	94 f3       	brlt	.-28     	; 0x1f4 <PWM_Draw_Signal+0x158>
	{
		strcat(arrow,"#"); // arrow body
	}
	strcat(arrow,"@"); // right arrow
     210:	be 01       	movw	r22, r28
     212:	6f 5f       	subi	r22, 0xFF	; 255
     214:	7f 4f       	sbci	r23, 0xFF	; 255
     216:	fb 01       	movw	r30, r22
     218:	01 90       	ld	r0, Z+
     21a:	00 20       	and	r0, r0
     21c:	e9 f7       	brne	.-6      	; 0x218 <PWM_Draw_Signal+0x17c>
     21e:	31 97       	sbiw	r30, 0x01	; 1
     220:	80 e4       	ldi	r24, 0x40	; 64
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	91 83       	std	Z+1, r25	; 0x01
     226:	80 83       	st	Z, r24
	
	GLCD_String(6,arrow,Left); /* Display arrow */
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	86 e0       	ldi	r24, 0x06	; 6
     22c:	0e 94 a8 01 	call	0x350	; 0x350 <GLCD_String>
	GLCD_String(7,pulse,Left); /* Display squareWave */
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	be 01       	movw	r22, r28
     234:	60 5f       	subi	r22, 0xF0	; 240
     236:	7f 4f       	sbci	r23, 0xFF	; 255
     238:	87 e0       	ldi	r24, 0x07	; 7
     23a:	0e 94 a8 01 	call	0x350	; 0x350 <GLCD_String>
	
}
     23e:	e7 96       	adiw	r28, 0x37	; 55
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	df 90       	pop	r13
     258:	cf 90       	pop	r12
     25a:	bf 90       	pop	r11
     25c:	af 90       	pop	r10
     25e:	9f 90       	pop	r9
     260:	8f 90       	pop	r8
     262:	08 95       	ret

00000264 <PWM_Get_Signal>:

/* Use this function to Get all 3 the PWM signal parameters Duty frequency and period time */

void PWM_Get_Signal(void)
{
	ICU_GetPWM();
     264:	0e 94 f6 03 	call	0x7ec	; 0x7ec <ICU_GetPWM>
     268:	08 95       	ret

0000026a <GLCD_Command>:
	GLCD_Command(0x3F);		/* Display ON */
}

void GLCD_Command(char Command)		/* GLCD command function */
{
	Data_Port = Command;		/* Copy command on data pin */
     26a:	8b bb       	out	0x1b, r24	; 27
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/
     26c:	85 b3       	in	r24, 0x15	; 21
     26e:	8e 7f       	andi	r24, 0xFE	; 254
     270:	85 bb       	out	0x15, r24	; 21
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
     272:	85 b3       	in	r24, 0x15	; 21
     274:	8d 7f       	andi	r24, 0xFD	; 253
     276:	85 bb       	out	0x15, r24	; 21
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
     278:	85 b3       	in	r24, 0x15	; 21
     27a:	84 60       	ori	r24, 0x04	; 4
     27c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27e:	8a e1       	ldi	r24, 0x1A	; 26
     280:	8a 95       	dec	r24
     282:	f1 f7       	brne	.-4      	; 0x280 <GLCD_Command+0x16>
     284:	00 c0       	rjmp	.+0      	; 0x286 <GLCD_Command+0x1c>
	_delay_us(5);
	Command_Port &= ~(1 << EN);
     286:	85 b3       	in	r24, 0x15	; 21
     288:	8b 7f       	andi	r24, 0xFB	; 251
     28a:	85 bb       	out	0x15, r24	; 21
     28c:	8a e1       	ldi	r24, 0x1A	; 26
     28e:	8a 95       	dec	r24
     290:	f1 f7       	brne	.-4      	; 0x28e <GLCD_Command+0x24>
     292:	00 c0       	rjmp	.+0      	; 0x294 <GLCD_Command+0x2a>
     294:	08 95       	ret

00000296 <GLCD_Init>:



void GLCD_Init()			/* GLCD initialize function */
{
	Data_Port_Dir = 0xFF;
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	8a bb       	out	0x1a, r24	; 26
	Command_Port_Dir = 0xFF;
     29a:	84 bb       	out	0x14, r24	; 20
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
     29c:	85 b3       	in	r24, 0x15	; 21
     29e:	88 63       	ori	r24, 0x38	; 56
     2a0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a2:	2f ef       	ldi	r18, 0xFF	; 255
     2a4:	89 ef       	ldi	r24, 0xF9	; 249
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	21 50       	subi	r18, 0x01	; 1
     2aa:	80 40       	sbci	r24, 0x00	; 0
     2ac:	90 40       	sbci	r25, 0x00	; 0
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <GLCD_Init+0x12>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <GLCD_Init+0x1c>
     2b2:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
     2b4:	8e e3       	ldi	r24, 0x3E	; 62
     2b6:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
     2ba:	80 e4       	ldi	r24, 0x40	; 64
     2bc:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
     2c0:	88 eb       	ldi	r24, 0xB8	; 184
     2c2:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
     2c6:	80 ec       	ldi	r24, 0xC0	; 192
     2c8:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
     2cc:	8f e3       	ldi	r24, 0x3F	; 63
     2ce:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
     2d2:	08 95       	ret

000002d4 <GLCD_Data>:
	_delay_us(5);
}

void GLCD_Data(char Data)		/* GLCD data function */
{
	Data_Port = Data;		/* Copy data on data pin */
     2d4:	8b bb       	out	0x1b, r24	; 27
	Command_Port |=  (1 << RS);	/* Make RS HIGH for data register */
     2d6:	85 b3       	in	r24, 0x15	; 21
     2d8:	81 60       	ori	r24, 0x01	; 1
     2da:	85 bb       	out	0x15, r24	; 21
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
     2dc:	85 b3       	in	r24, 0x15	; 21
     2de:	8d 7f       	andi	r24, 0xFD	; 253
     2e0:	85 bb       	out	0x15, r24	; 21
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
     2e2:	85 b3       	in	r24, 0x15	; 21
     2e4:	84 60       	ori	r24, 0x04	; 4
     2e6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e8:	8a e1       	ldi	r24, 0x1A	; 26
     2ea:	8a 95       	dec	r24
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <GLCD_Data+0x16>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <GLCD_Data+0x1c>
	_delay_us(5);
	Command_Port &= ~(1 << EN);
     2f0:	85 b3       	in	r24, 0x15	; 21
     2f2:	8b 7f       	andi	r24, 0xFB	; 251
     2f4:	85 bb       	out	0x15, r24	; 21
     2f6:	8a e1       	ldi	r24, 0x1A	; 26
     2f8:	8a 95       	dec	r24
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <GLCD_Data+0x24>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <GLCD_Data+0x2a>
     2fe:	08 95       	ret

00000300 <GLCD_ClearAll>:
}



void GLCD_ClearAll()			/* GLCD all display clear function */
{
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
     308:	85 b3       	in	r24, 0x15	; 21
     30a:	88 61       	ori	r24, 0x18	; 24
     30c:	85 bb       	out	0x15, r24	; 21
	for(i = 0; i < TotalPage; i++)
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	10 c0       	rjmp	.+32     	; 0x334 <GLCD_ClearAll+0x34>
	{
		GLCD_Command((0xB8) + i);/* Increment page */
     314:	88 eb       	ldi	r24, 0xB8	; 184
     316:	80 0f       	add	r24, r16
     318:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
		for(j = 0; j < 64; j++)
     31c:	c0 e0       	ldi	r28, 0x00	; 0
     31e:	d0 e0       	ldi	r29, 0x00	; 0
     320:	04 c0       	rjmp	.+8      	; 0x32a <GLCD_ClearAll+0x2a>
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <GLCD_Data>
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
		for(j = 0; j < 64; j++)
     328:	21 96       	adiw	r28, 0x01	; 1
     32a:	c0 34       	cpi	r28, 0x40	; 64
     32c:	d1 05       	cpc	r29, r1
     32e:	cc f3       	brlt	.-14     	; 0x322 <GLCD_ClearAll+0x22>
void GLCD_ClearAll()			/* GLCD all display clear function */
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
     330:	0f 5f       	subi	r16, 0xFF	; 255
     332:	1f 4f       	sbci	r17, 0xFF	; 255
     334:	08 30       	cpi	r16, 0x08	; 8
     336:	11 05       	cpc	r17, r1
     338:	6c f3       	brlt	.-38     	; 0x314 <GLCD_ClearAll+0x14>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
     33a:	80 e4       	ldi	r24, 0x40	; 64
     33c:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
     340:	88 eb       	ldi	r24, 0xB8	; 184
     342:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
}
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	08 95       	ret

00000350 <GLCD_String>:

/* This Function Display String From custom char */

void GLCD_String(char page_no, char *str,u8 side)/* GLCD string write function */
{
     350:	2f 92       	push	r2
     352:	3f 92       	push	r3
     354:	4f 92       	push	r4
     356:	5f 92       	push	r5
     358:	6f 92       	push	r6
     35a:	7f 92       	push	r7
     35c:	8f 92       	push	r8
     35e:	9f 92       	push	r9
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	2a 97       	sbiw	r28, 0x0a	; 10
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	78 87       	std	Y+8, r23	; 0x08
     386:	6f 83       	std	Y+7, r22	; 0x07
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
     388:	28 2f       	mov	r18, r24
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	3e 83       	std	Y+6, r19	; 0x06
     38e:	2d 83       	std	Y+5, r18	; 0x05
     390:	c9 01       	movw	r24, r18
     392:	88 54       	subi	r24, 0x48	; 72
     394:	9f 4f       	sbci	r25, 0xFF	; 255
     396:	9c 83       	std	Y+4, r25	; 0x04
     398:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
	
	if (side==0)
     39a:	41 11       	cpse	r20, r1
     39c:	07 c0       	rjmp	.+14     	; 0x3ac <GLCD_String+0x5c>
	{
		Command_Port |= (1 << CS1);	/* Select Left half of display */
     39e:	25 b3       	in	r18, 0x15	; 21
     3a0:	28 60       	ori	r18, 0x08	; 8
     3a2:	25 bb       	out	0x15, r18	; 21
		Command_Port &= ~(1 << CS2);
     3a4:	25 b3       	in	r18, 0x15	; 21
     3a6:	2f 7e       	andi	r18, 0xEF	; 239
     3a8:	25 bb       	out	0x15, r18	; 21
     3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <GLCD_String+0x68>
	}
	else
	{
		Command_Port |= (1 << CS2);	/* Select Left Right of display */
     3ac:	25 b3       	in	r18, 0x15	; 21
     3ae:	20 61       	ori	r18, 0x10	; 16
     3b0:	25 bb       	out	0x15, r18	; 21
		Command_Port &= ~(1 << CS1);
     3b2:	25 b3       	in	r18, 0x15	; 21
     3b4:	27 7f       	andi	r18, 0xF7	; 247
     3b6:	25 bb       	out	0x15, r18	; 21
	}
	
	
	
	GLCD_Command(Page);
     3b8:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
void GLCD_String(char page_no, char *str,u8 side)/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
     3bc:	51 2c       	mov	r5, r1
     3be:	31 2c       	mov	r3, r1
     3c0:	21 2c       	mov	r2, r1
     3c2:	0f 2e       	mov	r0, r31
     3c4:	ff e3       	ldi	r31, 0x3F	; 63
     3c6:	4f 2e       	mov	r4, r31
     3c8:	f0 2d       	mov	r31, r0

void GLCD_String(char page_no, char *str,u8 side)/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
     3ca:	1a 86       	std	Y+10, r1	; 0x0a
     3cc:	19 86       	std	Y+9, r1	; 0x09
	}
	
	
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
     3ce:	1a 82       	std	Y+2, r1	; 0x02
     3d0:	19 82       	std	Y+1, r1	; 0x01
     3d2:	4a c1       	rjmp	.+660    	; 0x668 <__EEPROM_REGION_LENGTH__+0x268>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
     3d4:	6d 80       	ldd	r6, Y+5	; 0x05
     3d6:	7e 80       	ldd	r7, Y+6	; 0x06
     3d8:	71 94       	neg	r7
     3da:	61 94       	neg	r6
     3dc:	71 08       	sbc	r7, r1
     3de:	76 94       	lsr	r7
     3e0:	76 2c       	mov	r7, r6
     3e2:	66 24       	eor	r6, r6
     3e4:	77 94       	ror	r7
     3e6:	67 94       	ror	r6
     3e8:	95 e0       	ldi	r25, 0x05	; 5
     3ea:	69 1a       	sub	r6, r25
     3ec:	9c ef       	ldi	r25, 0xFC	; 252
     3ee:	79 0a       	sbc	r7, r25
     3f0:	e9 85       	ldd	r30, Y+9	; 0x09
     3f2:	fa 85       	ldd	r31, Y+10	; 0x0a
     3f4:	6e 16       	cp	r6, r30
     3f6:	7f 06       	cpc	r7, r31
     3f8:	08 f4       	brcc	.+2      	; 0x3fc <GLCD_String+0xac>
     3fa:	40 c1       	rjmp	.+640    	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
		break;
		if (str[i]!=32)
     3fc:	80 32       	cpi	r24, 0x20	; 32
     3fe:	09 f0       	breq	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     400:	48 c0       	rjmp	.+144    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     402:	50 c0       	rjmp	.+160    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		{
			for (column=1; column<=FontWidth; column++)
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
     404:	a9 84       	ldd	r10, Y+9	; 0x09
     406:	ba 84       	ldd	r11, Y+10	; 0x0a
     408:	ae 0c       	add	r10, r14
     40a:	bf 1c       	adc	r11, r15
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	5f e3       	ldi	r21, 0x3F	; 63
     414:	65 2d       	mov	r22, r5
     416:	73 2d       	mov	r23, r3
     418:	82 2d       	mov	r24, r2
     41a:	94 2d       	mov	r25, r4
     41c:	0e 94 18 05 	call	0xa30	; 0xa30 <__addsf3>
     420:	c6 2e       	mov	r12, r22
     422:	d7 2e       	mov	r13, r23
     424:	08 2f       	mov	r16, r24
     426:	19 2f       	mov	r17, r25
     428:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fixsfsi>
     42c:	76 95       	lsr	r23
     42e:	76 2f       	mov	r23, r22
     430:	66 27       	eor	r22, r22
     432:	77 95       	ror	r23
     434:	67 95       	ror	r22
     436:	a6 16       	cp	r10, r22
     438:	b7 06       	cpc	r11, r23
     43a:	39 f5       	brne	.+78     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
				{
					if (column == FontWidth)
     43c:	f5 e0       	ldi	r31, 0x05	; 5
     43e:	ef 16       	cp	r14, r31
     440:	f1 04       	cpc	r15, r1
     442:	81 f1       	breq	.+96     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					break;
					GLCD_Command(0x40);
     444:	80 e4       	ldi	r24, 0x40	; 64
     446:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
					Y_address = Y_address + column;
					Command_Port ^= (1 << CS1);
     44a:	95 b3       	in	r25, 0x15	; 21
     44c:	88 e0       	ldi	r24, 0x08	; 8
     44e:	89 27       	eor	r24, r25
     450:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
     452:	95 b3       	in	r25, 0x15	; 21
     454:	80 e1       	ldi	r24, 0x10	; 16
     456:	89 27       	eor	r24, r25
     458:	85 bb       	out	0x15, r24	; 21
					GLCD_Command(Page + Page_inc);
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	3c 81       	ldd	r19, Y+4	; 0x04
     45e:	b9 01       	movw	r22, r18
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 31 06 	call	0xc62	; 0xc62 <__floatunsisf>
     468:	25 2d       	mov	r18, r5
     46a:	33 2d       	mov	r19, r3
     46c:	42 2d       	mov	r20, r2
     46e:	54 2d       	mov	r21, r4
     470:	0e 94 18 05 	call	0xa30	; 0xa30 <__addsf3>
     474:	0e 94 02 06 	call	0xc04	; 0xc04 <__fixunssfsi>
     478:	86 2f       	mov	r24, r22
     47a:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
					Page_inc = Page_inc + 0.5;
     47e:	5c 2c       	mov	r5, r12
     480:	3d 2c       	mov	r3, r13
     482:	20 2e       	mov	r2, r16
     484:	41 2e       	mov	r4, r17
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
				{
					if (column == FontWidth)
					break;
					GLCD_Command(0x40);
					Y_address = Y_address + column;
     486:	ba 86       	std	Y+10, r11	; 0x0a
     488:	a9 86       	std	Y+9, r10	; 0x09
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
		break;
		if (str[i]!=32)
		{
			for (column=1; column<=FontWidth; column++)
     48a:	3f ef       	ldi	r19, 0xFF	; 255
     48c:	e3 1a       	sub	r14, r19
     48e:	f3 0a       	sbc	r15, r19
     490:	03 c0       	rjmp	.+6      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     492:	ee 24       	eor	r14, r14
     494:	e3 94       	inc	r14
     496:	f1 2c       	mov	r15, r1
     498:	96 e0       	ldi	r25, 0x06	; 6
     49a:	e9 16       	cp	r14, r25
     49c:	f1 04       	cpc	r15, r1
     49e:	08 f4       	brcc	.+2      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     4a0:	b1 cf       	rjmp	.-158    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
     4a4:	89 85       	ldd	r24, Y+9	; 0x09
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	68 16       	cp	r6, r24
     4aa:	79 06       	cpc	r7, r25
     4ac:	08 f4       	brcc	.+2      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4ae:	e6 c0       	rjmp	.+460    	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
     4b0:	f4 01       	movw	r30, r8
     4b2:	80 81       	ld	r24, Z
     4b4:	80 32       	cpi	r24, 0x20	; 32
     4b6:	09 f4       	brne	.+2      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4b8:	4b c0       	rjmp	.+150    	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	10 e0       	ldi	r17, 0x00	; 0
     4be:	96 c0       	rjmp	.+300    	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);
     4c0:	f4 01       	movw	r30, r8
     4c2:	80 81       	ld	r24, Z
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	80 97       	sbiw	r24, 0x20	; 32
     4c8:	fc 01       	movw	r30, r24
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	ee 0f       	add	r30, r30
     4d0:	ff 1f       	adc	r31, r31
     4d2:	e8 0f       	add	r30, r24
     4d4:	f9 1f       	adc	r31, r25
     4d6:	e0 5a       	subi	r30, 0xA0	; 160
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	e0 0f       	add	r30, r16
     4dc:	f1 1f       	adc	r31, r17
     4de:	80 81       	ld	r24, Z
     4e0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <GLCD_Data>
				if((Y_address+1)%64==0)
     4e4:	29 85       	ldd	r18, Y+9	; 0x09
     4e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4e8:	2f 5f       	subi	r18, 0xFF	; 255
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	3a 87       	std	Y+10, r19	; 0x0a
     4ee:	29 87       	std	Y+9, r18	; 0x09
     4f0:	c9 01       	movw	r24, r18
     4f2:	8f 73       	andi	r24, 0x3F	; 63
     4f4:	99 27       	eor	r25, r25
     4f6:	89 2b       	or	r24, r25
     4f8:	41 f5       	brne	.+80     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
				{
					Command_Port ^= (1 << CS1);
     4fa:	95 b3       	in	r25, 0x15	; 21
     4fc:	88 e0       	ldi	r24, 0x08	; 8
     4fe:	89 27       	eor	r24, r25
     500:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
     502:	95 b3       	in	r25, 0x15	; 21
     504:	80 e1       	ldi	r24, 0x10	; 16
     506:	89 27       	eor	r24, r25
     508:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));
     50a:	eb 81       	ldd	r30, Y+3	; 0x03
     50c:	fc 81       	ldd	r31, Y+4	; 0x04
     50e:	bf 01       	movw	r22, r30
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 31 06 	call	0xc62	; 0xc62 <__floatunsisf>
     518:	25 2d       	mov	r18, r5
     51a:	33 2d       	mov	r19, r3
     51c:	42 2d       	mov	r20, r2
     51e:	54 2d       	mov	r21, r4
     520:	0e 94 18 05 	call	0xa30	; 0xa30 <__addsf3>
     524:	0e 94 02 06 	call	0xc04	; 0xc04 <__fixunssfsi>
     528:	86 2f       	mov	r24, r22
     52a:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
					Page_inc = Page_inc + 0.5;
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	5f e3       	ldi	r21, 0x3F	; 63
     536:	65 2d       	mov	r22, r5
     538:	73 2d       	mov	r23, r3
     53a:	82 2d       	mov	r24, r2
     53c:	94 2d       	mov	r25, r4
     53e:	0e 94 18 05 	call	0xa30	; 0xa30 <__addsf3>
     542:	56 2e       	mov	r5, r22
     544:	37 2e       	mov	r3, r23
     546:	28 2e       	mov	r2, r24
     548:	49 2e       	mov	r4, r25
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
     54a:	0f 5f       	subi	r16, 0xFF	; 255
     54c:	1f 4f       	sbci	r17, 0xFF	; 255
     54e:	02 c0       	rjmp	.+4      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     550:	00 e0       	ldi	r16, 0x00	; 0
     552:	10 e0       	ldi	r17, 0x00	; 0
     554:	05 30       	cpi	r16, 0x05	; 5
     556:	11 05       	cpc	r17, r1
     558:	08 f4       	brcc	.+2      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
     55a:	b2 cf       	rjmp	.-156    	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     55c:	7f c0       	rjmp	.+254    	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
		}
		else
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);
     55e:	f4 01       	movw	r30, r8
     560:	80 81       	ld	r24, Z
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	80 97       	sbiw	r24, 0x20	; 32
     566:	fc 01       	movw	r30, r24
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	ee 0f       	add	r30, r30
     56e:	ff 1f       	adc	r31, r31
     570:	e8 0f       	add	r30, r24
     572:	f9 1f       	adc	r31, r25
     574:	e0 5a       	subi	r30, 0xA0	; 160
     576:	ff 4f       	sbci	r31, 0xFF	; 255
     578:	e0 0f       	add	r30, r16
     57a:	f1 1f       	adc	r31, r17
     57c:	80 81       	ld	r24, Z
     57e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <GLCD_Data>
				if((Y_address+1)%64==0)
     582:	29 85       	ldd	r18, Y+9	; 0x09
     584:	3a 85       	ldd	r19, Y+10	; 0x0a
     586:	2f 5f       	subi	r18, 0xFF	; 255
     588:	3f 4f       	sbci	r19, 0xFF	; 255
     58a:	3a 87       	std	Y+10, r19	; 0x0a
     58c:	29 87       	std	Y+9, r18	; 0x09
     58e:	c9 01       	movw	r24, r18
     590:	8f 73       	andi	r24, 0x3F	; 63
     592:	99 27       	eor	r25, r25
     594:	89 2b       	or	r24, r25
     596:	41 f5       	brne	.+80     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
				{
					Command_Port ^= (1 << CS1);
     598:	95 b3       	in	r25, 0x15	; 21
     59a:	88 e0       	ldi	r24, 0x08	; 8
     59c:	89 27       	eor	r24, r25
     59e:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
     5a0:	95 b3       	in	r25, 0x15	; 21
     5a2:	80 e1       	ldi	r24, 0x10	; 16
     5a4:	89 27       	eor	r24, r25
     5a6:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));
     5a8:	eb 81       	ldd	r30, Y+3	; 0x03
     5aa:	fc 81       	ldd	r31, Y+4	; 0x04
     5ac:	bf 01       	movw	r22, r30
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 31 06 	call	0xc62	; 0xc62 <__floatunsisf>
     5b6:	25 2d       	mov	r18, r5
     5b8:	33 2d       	mov	r19, r3
     5ba:	42 2d       	mov	r20, r2
     5bc:	54 2d       	mov	r21, r4
     5be:	0e 94 18 05 	call	0xa30	; 0xa30 <__addsf3>
     5c2:	0e 94 02 06 	call	0xc04	; 0xc04 <__fixunssfsi>
     5c6:	86 2f       	mov	r24, r22
     5c8:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
					Page_inc = Page_inc + 0.5;
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	5f e3       	ldi	r21, 0x3F	; 63
     5d4:	65 2d       	mov	r22, r5
     5d6:	73 2d       	mov	r23, r3
     5d8:	82 2d       	mov	r24, r2
     5da:	94 2d       	mov	r25, r4
     5dc:	0e 94 18 05 	call	0xa30	; 0xa30 <__addsf3>
     5e0:	56 2e       	mov	r5, r22
     5e2:	37 2e       	mov	r3, r23
     5e4:	28 2e       	mov	r2, r24
     5e6:	49 2e       	mov	r4, r25
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
     5e8:	0f 5f       	subi	r16, 0xFF	; 255
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	05 30       	cpi	r16, 0x05	; 5
     5ee:	11 05       	cpc	r17, r1
     5f0:	08 f4       	brcc	.+2      	; 0x5f4 <__EEPROM_REGION_LENGTH__+0x1f4>
     5f2:	b5 cf       	rjmp	.-150    	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
					GLCD_Command((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <GLCD_Data>
			Y_address++;
     5fa:	89 85       	ldd	r24, Y+9	; 0x09
     5fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	9a 87       	std	Y+10, r25	; 0x0a
     602:	89 87       	std	Y+9, r24	; 0x09
			if((Y_address)%64 == 0)
     604:	8f 73       	andi	r24, 0x3F	; 63
     606:	99 27       	eor	r25, r25
     608:	89 2b       	or	r24, r25
     60a:	41 f5       	brne	.+80     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
			{
				Command_Port ^= (1 << CS1);
     60c:	95 b3       	in	r25, 0x15	; 21
     60e:	88 e0       	ldi	r24, 0x08	; 8
     610:	89 27       	eor	r24, r25
     612:	85 bb       	out	0x15, r24	; 21
				Command_Port ^= (1 << CS2);
     614:	95 b3       	in	r25, 0x15	; 21
     616:	80 e1       	ldi	r24, 0x10	; 16
     618:	89 27       	eor	r24, r25
     61a:	85 bb       	out	0x15, r24	; 21
				GLCD_Command((Page+Page_inc));
     61c:	eb 81       	ldd	r30, Y+3	; 0x03
     61e:	fc 81       	ldd	r31, Y+4	; 0x04
     620:	bf 01       	movw	r22, r30
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 31 06 	call	0xc62	; 0xc62 <__floatunsisf>
     62a:	25 2d       	mov	r18, r5
     62c:	33 2d       	mov	r19, r3
     62e:	42 2d       	mov	r20, r2
     630:	54 2d       	mov	r21, r4
     632:	0e 94 18 05 	call	0xa30	; 0xa30 <__addsf3>
     636:	0e 94 02 06 	call	0xc04	; 0xc04 <__fixunssfsi>
     63a:	86 2f       	mov	r24, r22
     63c:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
				Page_inc = Page_inc + 0.5;
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	5f e3       	ldi	r21, 0x3F	; 63
     648:	65 2d       	mov	r22, r5
     64a:	73 2d       	mov	r23, r3
     64c:	82 2d       	mov	r24, r2
     64e:	94 2d       	mov	r25, r4
     650:	0e 94 18 05 	call	0xa30	; 0xa30 <__addsf3>
     654:	56 2e       	mov	r5, r22
     656:	37 2e       	mov	r3, r23
     658:	28 2e       	mov	r2, r24
     65a:	49 2e       	mov	r4, r25
	}
	
	
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
     65c:	29 81       	ldd	r18, Y+1	; 0x01
     65e:	3a 81       	ldd	r19, Y+2	; 0x02
     660:	2f 5f       	subi	r18, 0xFF	; 255
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	3a 83       	std	Y+2, r19	; 0x02
     666:	29 83       	std	Y+1, r18	; 0x01
     668:	8f 80       	ldd	r8, Y+7	; 0x07
     66a:	98 84       	ldd	r9, Y+8	; 0x08
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	88 0e       	add	r8, r24
     672:	99 1e       	adc	r9, r25
     674:	f4 01       	movw	r30, r8
     676:	80 81       	ld	r24, Z
     678:	81 11       	cpse	r24, r1
     67a:	ac ce       	rjmp	.-680    	; 0x3d4 <GLCD_String+0x84>
				GLCD_Command((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40);	/* Set Y address (column=0) */
     67c:	80 e4       	ldi	r24, 0x40	; 64
     67e:	0e 94 35 01 	call	0x26a	; 0x26a <GLCD_Command>
}
     682:	2a 96       	adiw	r28, 0x0a	; 10
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	bf 90       	pop	r11
     6a0:	af 90       	pop	r10
     6a2:	9f 90       	pop	r9
     6a4:	8f 90       	pop	r8
     6a6:	7f 90       	pop	r7
     6a8:	6f 90       	pop	r6
     6aa:	5f 90       	pop	r5
     6ac:	4f 90       	pop	r4
     6ae:	3f 90       	pop	r3
     6b0:	2f 90       	pop	r2
     6b2:	08 95       	ret

000006b4 <main>:
	
    //PWM_Drawer_internal_init(Timer0FastPWM,ClockValue_16000KHZ,50);
	
	/* External PWM SIGNAl */
	
	PWM_Drawer_external_init();
     6b4:	0e 94 49 00 	call	0x92	; 0x92 <PWM_Drawer_external_init>
	
    while (1) 
    {
		PWM_Get_Signal();	//Signal measurement
     6b8:	0e 94 32 01 	call	0x264	; 0x264 <PWM_Get_Signal>
		PWM_Draw_Signal();	//Sign drawing
     6bc:	0e 94 4e 00 	call	0x9c	; 0x9c <PWM_Draw_Signal>
     6c0:	fb cf       	rjmp	.-10     	; 0x6b8 <main+0x4>

000006c2 <Time2String>:
	
}

/* Function That Convert time float value to String */
void Time2String(f32 data) 
{
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	c3 57       	subi	r28, 0x73	; 115
     6d8:	d1 09       	sbc	r29, r1
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	6b 01       	movw	r12, r22
     6e6:	7c 01       	movw	r14, r24
	
	int cnt=0;
     6e8:	00 e0       	ldi	r16, 0x00	; 0
     6ea:	10 e0       	ldi	r17, 0x00	; 0
	char d[10];
	while( data <1)
     6ec:	0c c0       	rjmp	.+24     	; 0x706 <Time2String+0x44>
	{
		
		data=data *10;
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e2       	ldi	r20, 0x20	; 32
     6f4:	51 e4       	ldi	r21, 0x41	; 65
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__mulsf3>
     6fe:	6b 01       	movw	r12, r22
     700:	7c 01       	movw	r14, r24
		cnt++;
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
void Time2String(f32 data) 
{
	
	int cnt=0;
	char d[10];
	while( data <1)
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e8       	ldi	r20, 0x80	; 128
     70c:	5f e3       	ldi	r21, 0x3F	; 63
     70e:	c7 01       	movw	r24, r14
     710:	b6 01       	movw	r22, r12
     712:	0e 94 84 05 	call	0xb08	; 0xb08 <__cmpsf2>
     716:	88 23       	and	r24, r24
     718:	54 f3       	brlt	.-44     	; 0x6ee <Time2String+0x2c>
	{
		
		data=data *10;
		cnt++;
	}
	data=data*10;
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e2       	ldi	r20, 0x20	; 32
     720:	51 e4       	ldi	r21, 0x41	; 65
     722:	c7 01       	movw	r24, r14
     724:	b6 01       	movw	r22, r12
     726:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__mulsf3>
	ltoa(data,d,10);
     72a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fixsfsi>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     72e:	2a e0       	ldi	r18, 0x0A	; 10
     730:	ae 01       	movw	r20, r28
     732:	4f 5f       	subi	r20, 0xFF	; 255
     734:	5f 4f       	sbci	r21, 0xFF	; 255
     736:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__ltoa_ncheck>
	char ti[100]="";
     73a:	1c 86       	std	Y+12, r1	; 0x0c
     73c:	1b 86       	std	Y+11, r1	; 0x0b
     73e:	fe 01       	movw	r30, r28
     740:	3d 96       	adiw	r30, 0x0d	; 13
     742:	82 e6       	ldi	r24, 0x62	; 98
     744:	df 01       	movw	r26, r30
     746:	1d 92       	st	X+, r1
     748:	8a 95       	dec	r24
     74a:	e9 f7       	brne	.-6      	; 0x746 <Time2String+0x84>
	char sec[5]="ms";
     74c:	8d e6       	ldi	r24, 0x6D	; 109
     74e:	93 e7       	ldi	r25, 0x73	; 115
     750:	e1 96       	adiw	r28, 0x31	; 49
     752:	9f af       	std	Y+63, r25	; 0x3f
     754:	8e af       	std	Y+62, r24	; 0x3e
     756:	e1 97       	sbiw	r28, 0x31	; 49
     758:	e3 96       	adiw	r28, 0x33	; 51
     75a:	1f ae       	std	Y+63, r1	; 0x3f
     75c:	1e ae       	std	Y+62, r1	; 0x3e
     75e:	e3 97       	sbiw	r28, 0x33	; 51
     760:	e4 96       	adiw	r28, 0x34	; 52
     762:	1f ae       	std	Y+63, r1	; 0x3f
     764:	e4 97       	sbiw	r28, 0x34	; 52
	strcat(ti,"0.");
     766:	32 97       	sbiw	r30, 0x02	; 2
     768:	01 90       	ld	r0, Z+
     76a:	00 20       	and	r0, r0
     76c:	e9 f7       	brne	.-6      	; 0x768 <Time2String+0xa6>
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	80 e3       	ldi	r24, 0x30	; 48
     772:	9e e2       	ldi	r25, 0x2E	; 46
     774:	91 83       	std	Z+1, r25	; 0x01
     776:	80 83       	st	Z, r24
     778:	12 82       	std	Z+2, r1	; 0x02
	for (int i = 0 ; i<(cnt-1);i++)
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0b c0       	rjmp	.+22     	; 0x796 <Time2String+0xd4>
	{
		strcat(ti,"0");
     780:	fe 01       	movw	r30, r28
     782:	3b 96       	adiw	r30, 0x0b	; 11
     784:	01 90       	ld	r0, Z+
     786:	00 20       	and	r0, r0
     788:	e9 f7       	brne	.-6      	; 0x784 <Time2String+0xc2>
     78a:	31 97       	sbiw	r30, 0x01	; 1
     78c:	20 e3       	ldi	r18, 0x30	; 48
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	31 83       	std	Z+1, r19	; 0x01
     792:	20 83       	st	Z, r18
	data=data*10;
	ltoa(data,d,10);
	char ti[100]="";
	char sec[5]="ms";
	strcat(ti,"0.");
	for (int i = 0 ; i<(cnt-1);i++)
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	98 01       	movw	r18, r16
     798:	21 50       	subi	r18, 0x01	; 1
     79a:	31 09       	sbc	r19, r1
     79c:	82 17       	cp	r24, r18
     79e:	93 07       	cpc	r25, r19
     7a0:	7c f3       	brlt	.-34     	; 0x780 <Time2String+0xbe>
	{
		strcat(ti,"0");
	}
	strcat(ti,d);
     7a2:	be 01       	movw	r22, r28
     7a4:	6f 5f       	subi	r22, 0xFF	; 255
     7a6:	7f 4f       	sbci	r23, 0xFF	; 255
     7a8:	ce 01       	movw	r24, r28
     7aa:	0b 96       	adiw	r24, 0x0b	; 11
     7ac:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	
	//strcat(ti,A);
	strcat(ti,sec);
     7b0:	be 01       	movw	r22, r28
     7b2:	61 59       	subi	r22, 0x91	; 145
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	ce 01       	movw	r24, r28
     7b8:	0b 96       	adiw	r24, 0x0b	; 11
     7ba:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	GLCD_String(4,ti,Left);
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	be 01       	movw	r22, r28
     7c2:	65 5f       	subi	r22, 0xF5	; 245
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	0e 94 a8 01 	call	0x350	; 0x350 <GLCD_String>
	
}
     7cc:	cd 58       	subi	r28, 0x8D	; 141
     7ce:	df 4f       	sbci	r29, 0xFF	; 255
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	08 95       	ret

000007ec <ICU_GetPWM>:

int duty;

/* Function That get all PWM parameter duty,frequency and period time */
void ICU_GetPWM(void) 
{
     7ec:	4f 92       	push	r4
     7ee:	5f 92       	push	r5
     7f0:	6f 92       	push	r6
     7f2:	7f 92       	push	r7
     7f4:	8f 92       	push	r8
     7f6:	9f 92       	push	r9
     7f8:	af 92       	push	r10
     7fa:	bf 92       	push	r11
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	ce 57       	subi	r28, 0x7E	; 126
     812:	d1 09       	sbc	r29, r1
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
	unsigned int A,B,C,Ton,T;;
	char duty_cycle[7]={0};
     81e:	fe 01       	movw	r30, r28
     820:	31 96       	adiw	r30, 0x01	; 1
     822:	87 e0       	ldi	r24, 0x07	; 7
     824:	df 01       	movw	r26, r30
     826:	1d 92       	st	X+, r1
     828:	8a 95       	dec	r24
     82a:	e9 f7       	brne	.-6      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
	char frequency[14]={0};
     82c:	37 96       	adiw	r30, 0x07	; 7
     82e:	8e e0       	ldi	r24, 0x0E	; 14
     830:	df 01       	movw	r26, r30
     832:	1d 92       	st	X+, r1
     834:	8a 95       	dec	r24
     836:	e9 f7       	brne	.-6      	; 0x832 <__DATA_REGION_LENGTH__+0x32>

		TCCR1A = 0;
     838:	1f bc       	out	0x2f, r1	; 47
		TCNT1=0;
     83a:	1d bc       	out	0x2d, r1	; 45
     83c:	1c bc       	out	0x2c, r1	; 44
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
     83e:	80 e2       	ldi	r24, 0x20	; 32
     840:	88 bf       	out	0x38, r24	; 56

		TCCR1B = 0xC1;  	/* Rising edge, no prescaler ,Noise cansceld */
     842:	81 ec       	ldi	r24, 0xC1	; 193
     844:	8e bd       	out	0x2e, r24	; 46
		while ((TIFR&(1<<ICF1)) == 0);
     846:	08 b6       	in	r0, 0x38	; 56
     848:	05 fe       	sbrs	r0, 5
     84a:	fd cf       	rjmp	.-6      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		A = ICR1;  		/* Take value of capture register */
     84c:	86 b5       	in	r24, 0x26	; 38
     84e:	97 b5       	in	r25, 0x27	; 39
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
     850:	20 e2       	ldi	r18, 0x20	; 32
     852:	28 bf       	out	0x38, r18	; 56
		
		TCCR1B = 0xC1;  	/* Falling edge, no prescaler Noise cansceld */
     854:	21 ec       	ldi	r18, 0xC1	; 193
     856:	2e bd       	out	0x2e, r18	; 46
		while ((TIFR&(1<<ICF1)) == 0);
     858:	08 b6       	in	r0, 0x38	; 56
     85a:	05 fe       	sbrs	r0, 5
     85c:	fd cf       	rjmp	.-6      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		B = ICR1;  		/* Take value of capture register */
     85e:	c6 b4       	in	r12, 0x26	; 38
     860:	d7 b4       	in	r13, 0x27	; 39
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
     862:	20 e2       	ldi	r18, 0x20	; 32
     864:	28 bf       	out	0x38, r18	; 56
		
		TCCR1B = 0x81;  	/* Rising edge, no prescaler Noise cansceld */
     866:	21 e8       	ldi	r18, 0x81	; 129
     868:	2e bd       	out	0x2e, r18	; 46
		while ((TIFR&(1<<ICF1)) == 0);
     86a:	08 b6       	in	r0, 0x38	; 56
     86c:	05 fe       	sbrs	r0, 5
     86e:	fd cf       	rjmp	.-6      	; 0x86a <__stack+0xb>
		C = ICR1;  		/* Take value of capture register */
     870:	06 b5       	in	r16, 0x26	; 38
     872:	17 b5       	in	r17, 0x27	; 39
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
     874:	20 e2       	ldi	r18, 0x20	; 32
     876:	28 bf       	out	0x38, r18	; 56

		TCCR1B = 0;  		/* Stop the timer */
     878:	1e bc       	out	0x2e, r1	; 46
		
		if(A<B && B<C)  	/* Check for valid condition, 
     87a:	8c 15       	cp	r24, r12
     87c:	9d 05       	cpc	r25, r13
     87e:	08 f0       	brcs	.+2      	; 0x882 <__stack+0x23>
     880:	ad c0       	rjmp	.+346    	; 0x9dc <__stack+0x17d>
     882:	c0 16       	cp	r12, r16
     884:	d1 06       	cpc	r13, r17
     886:	08 f0       	brcs	.+2      	; 0x88a <__stack+0x2b>
     888:	a9 c0       	rjmp	.+338    	; 0x9dc <__stack+0x17d>
					to avoid timer overflow reading */
		{
			Ton=C-B;
     88a:	0c 19       	sub	r16, r12
     88c:	1d 09       	sbc	r17, r13
			T=B-A;
     88e:	c8 1a       	sub	r12, r24
     890:	d9 0a       	sbc	r13, r25
			
			
			/* Calculate frequency */
			u32 freq= F_CPU/T;
     892:	e1 2c       	mov	r14, r1
     894:	f1 2c       	mov	r15, r1
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	74 e2       	ldi	r23, 0x24	; 36
     89a:	84 ef       	ldi	r24, 0xF4	; 244
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	a7 01       	movw	r20, r14
     8a0:	96 01       	movw	r18, r12
     8a2:	0e 94 64 07 	call	0xec8	; 0xec8 <__udivmodsi4>
			freq=freq/1000;
     8a6:	ca 01       	movw	r24, r20
     8a8:	b9 01       	movw	r22, r18
     8aa:	28 ee       	ldi	r18, 0xE8	; 232
     8ac:	33 e0       	ldi	r19, 0x03	; 3
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	0e 94 64 07 	call	0xec8	; 0xec8 <__udivmodsi4>
     8b6:	49 01       	movw	r8, r18
     8b8:	5a 01       	movw	r10, r20
			
			/* Calculate duty cycle */
			duty =((float) Ton /(float)T)*100;
     8ba:	b8 01       	movw	r22, r16
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 31 06 	call	0xc62	; 0xc62 <__floatunsisf>
     8c4:	2b 01       	movw	r4, r22
     8c6:	3c 01       	movw	r6, r24
     8c8:	c7 01       	movw	r24, r14
     8ca:	b6 01       	movw	r22, r12
     8cc:	0e 94 31 06 	call	0xc62	; 0xc62 <__floatunsisf>
     8d0:	9b 01       	movw	r18, r22
     8d2:	ac 01       	movw	r20, r24
     8d4:	c3 01       	movw	r24, r6
     8d6:	b2 01       	movw	r22, r4
     8d8:	0e 94 89 05 	call	0xb12	; 0xb12 <__divsf3>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	48 ec       	ldi	r20, 0xC8	; 200
     8e2:	52 e4       	ldi	r21, 0x42	; 66
     8e4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__mulsf3>
     8e8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fixsfsi>
     8ec:	70 93 bf 02 	sts	0x02BF, r23	; 0x8002bf <__data_end+0x1>
     8f0:	60 93 be 02 	sts	0x02BE, r22	; 0x8002be <__data_end>
 
			/* Calculate Time */
			f32 time =(1/(f32)freq);
     8f4:	c5 01       	movw	r24, r10
     8f6:	b4 01       	movw	r22, r8
     8f8:	0e 94 31 06 	call	0xc62	; 0xc62 <__floatunsisf>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	80 e8       	ldi	r24, 0x80	; 128
     906:	9f e3       	ldi	r25, 0x3F	; 63
     908:	0e 94 89 05 	call	0xb12	; 0xb12 <__divsf3>
     90c:	6b 01       	movw	r12, r22
     90e:	7c 01       	movw	r14, r24
     910:	2a e0       	ldi	r18, 0x0A	; 10
     912:	ae 01       	movw	r20, r28
     914:	48 5f       	subi	r20, 0xF8	; 248
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	c5 01       	movw	r24, r10
     91a:	b4 01       	movw	r22, r8
     91c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__ltoa_ncheck>
			
			/* Display frequency */
			ltoa(freq,frequency,10);
			char fr[100]="Freq:";
     920:	86 e0       	ldi	r24, 0x06	; 6
     922:	e0 e4       	ldi	r30, 0x40	; 64
     924:	f2 e0       	ldi	r31, 0x02	; 2
     926:	de 01       	movw	r26, r28
     928:	56 96       	adiw	r26, 0x16	; 22
     92a:	01 90       	ld	r0, Z+
     92c:	0d 92       	st	X+, r0
     92e:	8a 95       	dec	r24
     930:	e1 f7       	brne	.-8      	; 0x92a <__stack+0xcb>
     932:	fe 01       	movw	r30, r28
     934:	7c 96       	adiw	r30, 0x1c	; 28
     936:	8e e5       	ldi	r24, 0x5E	; 94
     938:	df 01       	movw	r26, r30
     93a:	1d 92       	st	X+, r1
     93c:	8a 95       	dec	r24
     93e:	e9 f7       	brne	.-6      	; 0x93a <__stack+0xdb>
			char hz[5]="Khz";
     940:	8b e4       	ldi	r24, 0x4B	; 75
     942:	98 e6       	ldi	r25, 0x68	; 104
     944:	ec 96       	adiw	r28, 0x3c	; 60
     946:	9f af       	std	Y+63, r25	; 0x3f
     948:	8e af       	std	Y+62, r24	; 0x3e
     94a:	ec 97       	sbiw	r28, 0x3c	; 60
     94c:	8a e7       	ldi	r24, 0x7A	; 122
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	ee 96       	adiw	r28, 0x3e	; 62
     952:	9f af       	std	Y+63, r25	; 0x3f
     954:	8e af       	std	Y+62, r24	; 0x3e
     956:	ee 97       	sbiw	r28, 0x3e	; 62
     958:	ef 96       	adiw	r28, 0x3f	; 63
     95a:	1f ae       	std	Y+63, r1	; 0x3f
     95c:	ef 97       	sbiw	r28, 0x3f	; 63
			strcat(fr,frequency);
     95e:	be 01       	movw	r22, r28
     960:	68 5f       	subi	r22, 0xF8	; 248
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	ce 01       	movw	r24, r28
     966:	46 96       	adiw	r24, 0x16	; 22
     968:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
			strcat(fr,hz);
     96c:	be 01       	movw	r22, r28
     96e:	66 58       	subi	r22, 0x86	; 134
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	ce 01       	movw	r24, r28
     974:	46 96       	adiw	r24, 0x16	; 22
     976:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
			GLCD_String(1,fr,Left);
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	be 01       	movw	r22, r28
     97e:	6a 5e       	subi	r22, 0xEA	; 234
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 a8 01 	call	0x350	; 0x350 <GLCD_String>
			/* Display Duty */
			sprintf(duty_cycle,"   Duty:%d",duty);
     988:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <__data_end+0x1>
     98c:	8f 93       	push	r24
     98e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__data_end>
     992:	8f 93       	push	r24
     994:	84 ea       	ldi	r24, 0xA4	; 164
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	9f 93       	push	r25
     99a:	8f 93       	push	r24
     99c:	8e 01       	movw	r16, r28
     99e:	0f 5f       	subi	r16, 0xFF	; 255
     9a0:	1f 4f       	sbci	r17, 0xFF	; 255
     9a2:	1f 93       	push	r17
     9a4:	0f 93       	push	r16
     9a6:	0e 94 d6 07 	call	0xfac	; 0xfac <sprintf>
			strcat(duty_cycle,"%");
     9aa:	f8 01       	movw	r30, r16
     9ac:	01 90       	ld	r0, Z+
     9ae:	00 20       	and	r0, r0
     9b0:	e9 f7       	brne	.-6      	; 0x9ac <__stack+0x14d>
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	85 e2       	ldi	r24, 0x25	; 37
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	91 83       	std	Z+1, r25	; 0x01
     9ba:	80 83       	st	Z, r24
			GLCD_String(1,duty_cycle,Right);
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	b8 01       	movw	r22, r16
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	0e 94 a8 01 	call	0x350	; 0x350 <GLCD_String>
			
			/* Display Time */
			Time2String(time);
     9c6:	c7 01       	movw	r24, r14
     9c8:	b6 01       	movw	r22, r12
     9ca:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Time2String>

		TCCR1B = 0;  		/* Stop the timer */
		
		if(A<B && B<C)  	/* Check for valid condition, 
					to avoid timer overflow reading */
		{
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	08 c0       	rjmp	.+16     	; 0x9ec <__stack+0x18d>
			
		}
		
		else
		{
			GLCD_ClearAll();
     9dc:	0e 94 80 01 	call	0x300	; 0x300 <GLCD_ClearAll>
			GLCD_String(1,"OUT OF RANGE!!",Left);
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	6f ea       	ldi	r22, 0xAF	; 175
     9e4:	72 e0       	ldi	r23, 0x02	; 2
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	0e 94 a8 01 	call	0x350	; 0x350 <GLCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ec:	bf ef       	ldi	r27, 0xFF	; 255
     9ee:	20 e7       	ldi	r18, 0x70	; 112
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	b1 50       	subi	r27, 0x01	; 1
     9f4:	20 40       	sbci	r18, 0x00	; 0
     9f6:	80 40       	sbci	r24, 0x00	; 0
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <__stack+0x193>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <__stack+0x19d>
     9fc:	00 00       	nop
		}
		_delay_ms(50);
	
}
     9fe:	c2 58       	subi	r28, 0x82	; 130
     a00:	df 4f       	sbci	r29, 0xFF	; 255
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	bf 90       	pop	r11
     a1e:	af 90       	pop	r10
     a20:	9f 90       	pop	r9
     a22:	8f 90       	pop	r8
     a24:	7f 90       	pop	r7
     a26:	6f 90       	pop	r6
     a28:	5f 90       	pop	r5
     a2a:	4f 90       	pop	r4
     a2c:	08 95       	ret

00000a2e <__subsf3>:
     a2e:	50 58       	subi	r21, 0x80	; 128

00000a30 <__addsf3>:
     a30:	bb 27       	eor	r27, r27
     a32:	aa 27       	eor	r26, r26
     a34:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__addsf3x>
     a38:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_round>
     a3c:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fp_pscA>
     a40:	38 f0       	brcs	.+14     	; 0xa50 <__addsf3+0x20>
     a42:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fp_pscB>
     a46:	20 f0       	brcs	.+8      	; 0xa50 <__addsf3+0x20>
     a48:	39 f4       	brne	.+14     	; 0xa58 <__addsf3+0x28>
     a4a:	9f 3f       	cpi	r25, 0xFF	; 255
     a4c:	19 f4       	brne	.+6      	; 0xa54 <__addsf3+0x24>
     a4e:	26 f4       	brtc	.+8      	; 0xa58 <__addsf3+0x28>
     a50:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_nan>
     a54:	0e f4       	brtc	.+2      	; 0xa58 <__addsf3+0x28>
     a56:	e0 95       	com	r30
     a58:	e7 fb       	bst	r30, 7
     a5a:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_inf>

00000a5e <__addsf3x>:
     a5e:	e9 2f       	mov	r30, r25
     a60:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_split3>
     a64:	58 f3       	brcs	.-42     	; 0xa3c <__addsf3+0xc>
     a66:	ba 17       	cp	r27, r26
     a68:	62 07       	cpc	r22, r18
     a6a:	73 07       	cpc	r23, r19
     a6c:	84 07       	cpc	r24, r20
     a6e:	95 07       	cpc	r25, r21
     a70:	20 f0       	brcs	.+8      	; 0xa7a <__addsf3x+0x1c>
     a72:	79 f4       	brne	.+30     	; 0xa92 <__addsf3x+0x34>
     a74:	a6 f5       	brtc	.+104    	; 0xade <__addsf3x+0x80>
     a76:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_zero>
     a7a:	0e f4       	brtc	.+2      	; 0xa7e <__addsf3x+0x20>
     a7c:	e0 95       	com	r30
     a7e:	0b 2e       	mov	r0, r27
     a80:	ba 2f       	mov	r27, r26
     a82:	a0 2d       	mov	r26, r0
     a84:	0b 01       	movw	r0, r22
     a86:	b9 01       	movw	r22, r18
     a88:	90 01       	movw	r18, r0
     a8a:	0c 01       	movw	r0, r24
     a8c:	ca 01       	movw	r24, r20
     a8e:	a0 01       	movw	r20, r0
     a90:	11 24       	eor	r1, r1
     a92:	ff 27       	eor	r31, r31
     a94:	59 1b       	sub	r21, r25
     a96:	99 f0       	breq	.+38     	; 0xabe <__addsf3x+0x60>
     a98:	59 3f       	cpi	r21, 0xF9	; 249
     a9a:	50 f4       	brcc	.+20     	; 0xab0 <__addsf3x+0x52>
     a9c:	50 3e       	cpi	r21, 0xE0	; 224
     a9e:	68 f1       	brcs	.+90     	; 0xafa <__addsf3x+0x9c>
     aa0:	1a 16       	cp	r1, r26
     aa2:	f0 40       	sbci	r31, 0x00	; 0
     aa4:	a2 2f       	mov	r26, r18
     aa6:	23 2f       	mov	r18, r19
     aa8:	34 2f       	mov	r19, r20
     aaa:	44 27       	eor	r20, r20
     aac:	58 5f       	subi	r21, 0xF8	; 248
     aae:	f3 cf       	rjmp	.-26     	; 0xa96 <__addsf3x+0x38>
     ab0:	46 95       	lsr	r20
     ab2:	37 95       	ror	r19
     ab4:	27 95       	ror	r18
     ab6:	a7 95       	ror	r26
     ab8:	f0 40       	sbci	r31, 0x00	; 0
     aba:	53 95       	inc	r21
     abc:	c9 f7       	brne	.-14     	; 0xab0 <__addsf3x+0x52>
     abe:	7e f4       	brtc	.+30     	; 0xade <__addsf3x+0x80>
     ac0:	1f 16       	cp	r1, r31
     ac2:	ba 0b       	sbc	r27, r26
     ac4:	62 0b       	sbc	r22, r18
     ac6:	73 0b       	sbc	r23, r19
     ac8:	84 0b       	sbc	r24, r20
     aca:	ba f0       	brmi	.+46     	; 0xafa <__addsf3x+0x9c>
     acc:	91 50       	subi	r25, 0x01	; 1
     ace:	a1 f0       	breq	.+40     	; 0xaf8 <__addsf3x+0x9a>
     ad0:	ff 0f       	add	r31, r31
     ad2:	bb 1f       	adc	r27, r27
     ad4:	66 1f       	adc	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	88 1f       	adc	r24, r24
     ada:	c2 f7       	brpl	.-16     	; 0xacc <__addsf3x+0x6e>
     adc:	0e c0       	rjmp	.+28     	; 0xafa <__addsf3x+0x9c>
     ade:	ba 0f       	add	r27, r26
     ae0:	62 1f       	adc	r22, r18
     ae2:	73 1f       	adc	r23, r19
     ae4:	84 1f       	adc	r24, r20
     ae6:	48 f4       	brcc	.+18     	; 0xafa <__addsf3x+0x9c>
     ae8:	87 95       	ror	r24
     aea:	77 95       	ror	r23
     aec:	67 95       	ror	r22
     aee:	b7 95       	ror	r27
     af0:	f7 95       	ror	r31
     af2:	9e 3f       	cpi	r25, 0xFE	; 254
     af4:	08 f0       	brcs	.+2      	; 0xaf8 <__addsf3x+0x9a>
     af6:	b0 cf       	rjmp	.-160    	; 0xa58 <__addsf3+0x28>
     af8:	93 95       	inc	r25
     afa:	88 0f       	add	r24, r24
     afc:	08 f0       	brcs	.+2      	; 0xb00 <__addsf3x+0xa2>
     afe:	99 27       	eor	r25, r25
     b00:	ee 0f       	add	r30, r30
     b02:	97 95       	ror	r25
     b04:	87 95       	ror	r24
     b06:	08 95       	ret

00000b08 <__cmpsf2>:
     b08:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__fp_cmp>
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <__cmpsf2+0x8>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	08 95       	ret

00000b12 <__divsf3>:
     b12:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__divsf3x>
     b16:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_round>
     b1a:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fp_pscB>
     b1e:	58 f0       	brcs	.+22     	; 0xb36 <__divsf3+0x24>
     b20:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fp_pscA>
     b24:	40 f0       	brcs	.+16     	; 0xb36 <__divsf3+0x24>
     b26:	29 f4       	brne	.+10     	; 0xb32 <__divsf3+0x20>
     b28:	5f 3f       	cpi	r21, 0xFF	; 255
     b2a:	29 f0       	breq	.+10     	; 0xb36 <__divsf3+0x24>
     b2c:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_inf>
     b30:	51 11       	cpse	r21, r1
     b32:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_szero>
     b36:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_nan>

00000b3a <__divsf3x>:
     b3a:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_split3>
     b3e:	68 f3       	brcs	.-38     	; 0xb1a <__divsf3+0x8>

00000b40 <__divsf3_pse>:
     b40:	99 23       	and	r25, r25
     b42:	b1 f3       	breq	.-20     	; 0xb30 <__divsf3+0x1e>
     b44:	55 23       	and	r21, r21
     b46:	91 f3       	breq	.-28     	; 0xb2c <__divsf3+0x1a>
     b48:	95 1b       	sub	r25, r21
     b4a:	55 0b       	sbc	r21, r21
     b4c:	bb 27       	eor	r27, r27
     b4e:	aa 27       	eor	r26, r26
     b50:	62 17       	cp	r22, r18
     b52:	73 07       	cpc	r23, r19
     b54:	84 07       	cpc	r24, r20
     b56:	38 f0       	brcs	.+14     	; 0xb66 <__divsf3_pse+0x26>
     b58:	9f 5f       	subi	r25, 0xFF	; 255
     b5a:	5f 4f       	sbci	r21, 0xFF	; 255
     b5c:	22 0f       	add	r18, r18
     b5e:	33 1f       	adc	r19, r19
     b60:	44 1f       	adc	r20, r20
     b62:	aa 1f       	adc	r26, r26
     b64:	a9 f3       	breq	.-22     	; 0xb50 <__divsf3_pse+0x10>
     b66:	35 d0       	rcall	.+106    	; 0xbd2 <__divsf3_pse+0x92>
     b68:	0e 2e       	mov	r0, r30
     b6a:	3a f0       	brmi	.+14     	; 0xb7a <__divsf3_pse+0x3a>
     b6c:	e0 e8       	ldi	r30, 0x80	; 128
     b6e:	32 d0       	rcall	.+100    	; 0xbd4 <__divsf3_pse+0x94>
     b70:	91 50       	subi	r25, 0x01	; 1
     b72:	50 40       	sbci	r21, 0x00	; 0
     b74:	e6 95       	lsr	r30
     b76:	00 1c       	adc	r0, r0
     b78:	ca f7       	brpl	.-14     	; 0xb6c <__divsf3_pse+0x2c>
     b7a:	2b d0       	rcall	.+86     	; 0xbd2 <__divsf3_pse+0x92>
     b7c:	fe 2f       	mov	r31, r30
     b7e:	29 d0       	rcall	.+82     	; 0xbd2 <__divsf3_pse+0x92>
     b80:	66 0f       	add	r22, r22
     b82:	77 1f       	adc	r23, r23
     b84:	88 1f       	adc	r24, r24
     b86:	bb 1f       	adc	r27, r27
     b88:	26 17       	cp	r18, r22
     b8a:	37 07       	cpc	r19, r23
     b8c:	48 07       	cpc	r20, r24
     b8e:	ab 07       	cpc	r26, r27
     b90:	b0 e8       	ldi	r27, 0x80	; 128
     b92:	09 f0       	breq	.+2      	; 0xb96 <__divsf3_pse+0x56>
     b94:	bb 0b       	sbc	r27, r27
     b96:	80 2d       	mov	r24, r0
     b98:	bf 01       	movw	r22, r30
     b9a:	ff 27       	eor	r31, r31
     b9c:	93 58       	subi	r25, 0x83	; 131
     b9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ba0:	3a f0       	brmi	.+14     	; 0xbb0 <__divsf3_pse+0x70>
     ba2:	9e 3f       	cpi	r25, 0xFE	; 254
     ba4:	51 05       	cpc	r21, r1
     ba6:	78 f0       	brcs	.+30     	; 0xbc6 <__divsf3_pse+0x86>
     ba8:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_inf>
     bac:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_szero>
     bb0:	5f 3f       	cpi	r21, 0xFF	; 255
     bb2:	e4 f3       	brlt	.-8      	; 0xbac <__divsf3_pse+0x6c>
     bb4:	98 3e       	cpi	r25, 0xE8	; 232
     bb6:	d4 f3       	brlt	.-12     	; 0xbac <__divsf3_pse+0x6c>
     bb8:	86 95       	lsr	r24
     bba:	77 95       	ror	r23
     bbc:	67 95       	ror	r22
     bbe:	b7 95       	ror	r27
     bc0:	f7 95       	ror	r31
     bc2:	9f 5f       	subi	r25, 0xFF	; 255
     bc4:	c9 f7       	brne	.-14     	; 0xbb8 <__divsf3_pse+0x78>
     bc6:	88 0f       	add	r24, r24
     bc8:	91 1d       	adc	r25, r1
     bca:	96 95       	lsr	r25
     bcc:	87 95       	ror	r24
     bce:	97 f9       	bld	r25, 7
     bd0:	08 95       	ret
     bd2:	e1 e0       	ldi	r30, 0x01	; 1
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	88 1f       	adc	r24, r24
     bda:	bb 1f       	adc	r27, r27
     bdc:	62 17       	cp	r22, r18
     bde:	73 07       	cpc	r23, r19
     be0:	84 07       	cpc	r24, r20
     be2:	ba 07       	cpc	r27, r26
     be4:	20 f0       	brcs	.+8      	; 0xbee <__divsf3_pse+0xae>
     be6:	62 1b       	sub	r22, r18
     be8:	73 0b       	sbc	r23, r19
     bea:	84 0b       	sbc	r24, r20
     bec:	ba 0b       	sbc	r27, r26
     bee:	ee 1f       	adc	r30, r30
     bf0:	88 f7       	brcc	.-30     	; 0xbd4 <__divsf3_pse+0x94>
     bf2:	e0 95       	com	r30
     bf4:	08 95       	ret

00000bf6 <__fixsfsi>:
     bf6:	0e 94 02 06 	call	0xc04	; 0xc04 <__fixunssfsi>
     bfa:	68 94       	set
     bfc:	b1 11       	cpse	r27, r1
     bfe:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_szero>
     c02:	08 95       	ret

00000c04 <__fixunssfsi>:
     c04:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fp_splitA>
     c08:	88 f0       	brcs	.+34     	; 0xc2c <__fixunssfsi+0x28>
     c0a:	9f 57       	subi	r25, 0x7F	; 127
     c0c:	98 f0       	brcs	.+38     	; 0xc34 <__fixunssfsi+0x30>
     c0e:	b9 2f       	mov	r27, r25
     c10:	99 27       	eor	r25, r25
     c12:	b7 51       	subi	r27, 0x17	; 23
     c14:	b0 f0       	brcs	.+44     	; 0xc42 <__fixunssfsi+0x3e>
     c16:	e1 f0       	breq	.+56     	; 0xc50 <__fixunssfsi+0x4c>
     c18:	66 0f       	add	r22, r22
     c1a:	77 1f       	adc	r23, r23
     c1c:	88 1f       	adc	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	1a f0       	brmi	.+6      	; 0xc28 <__fixunssfsi+0x24>
     c22:	ba 95       	dec	r27
     c24:	c9 f7       	brne	.-14     	; 0xc18 <__fixunssfsi+0x14>
     c26:	14 c0       	rjmp	.+40     	; 0xc50 <__fixunssfsi+0x4c>
     c28:	b1 30       	cpi	r27, 0x01	; 1
     c2a:	91 f0       	breq	.+36     	; 0xc50 <__fixunssfsi+0x4c>
     c2c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fp_zero>
     c30:	b1 e0       	ldi	r27, 0x01	; 1
     c32:	08 95       	ret
     c34:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_zero>
     c38:	67 2f       	mov	r22, r23
     c3a:	78 2f       	mov	r23, r24
     c3c:	88 27       	eor	r24, r24
     c3e:	b8 5f       	subi	r27, 0xF8	; 248
     c40:	39 f0       	breq	.+14     	; 0xc50 <__fixunssfsi+0x4c>
     c42:	b9 3f       	cpi	r27, 0xF9	; 249
     c44:	cc f3       	brlt	.-14     	; 0xc38 <__fixunssfsi+0x34>
     c46:	86 95       	lsr	r24
     c48:	77 95       	ror	r23
     c4a:	67 95       	ror	r22
     c4c:	b3 95       	inc	r27
     c4e:	d9 f7       	brne	.-10     	; 0xc46 <__fixunssfsi+0x42>
     c50:	3e f4       	brtc	.+14     	; 0xc60 <__fixunssfsi+0x5c>
     c52:	90 95       	com	r25
     c54:	80 95       	com	r24
     c56:	70 95       	com	r23
     c58:	61 95       	neg	r22
     c5a:	7f 4f       	sbci	r23, 0xFF	; 255
     c5c:	8f 4f       	sbci	r24, 0xFF	; 255
     c5e:	9f 4f       	sbci	r25, 0xFF	; 255
     c60:	08 95       	ret

00000c62 <__floatunsisf>:
     c62:	e8 94       	clt
     c64:	09 c0       	rjmp	.+18     	; 0xc78 <__floatsisf+0x12>

00000c66 <__floatsisf>:
     c66:	97 fb       	bst	r25, 7
     c68:	3e f4       	brtc	.+14     	; 0xc78 <__floatsisf+0x12>
     c6a:	90 95       	com	r25
     c6c:	80 95       	com	r24
     c6e:	70 95       	com	r23
     c70:	61 95       	neg	r22
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	8f 4f       	sbci	r24, 0xFF	; 255
     c76:	9f 4f       	sbci	r25, 0xFF	; 255
     c78:	99 23       	and	r25, r25
     c7a:	a9 f0       	breq	.+42     	; 0xca6 <__floatsisf+0x40>
     c7c:	f9 2f       	mov	r31, r25
     c7e:	96 e9       	ldi	r25, 0x96	; 150
     c80:	bb 27       	eor	r27, r27
     c82:	93 95       	inc	r25
     c84:	f6 95       	lsr	r31
     c86:	87 95       	ror	r24
     c88:	77 95       	ror	r23
     c8a:	67 95       	ror	r22
     c8c:	b7 95       	ror	r27
     c8e:	f1 11       	cpse	r31, r1
     c90:	f8 cf       	rjmp	.-16     	; 0xc82 <__floatsisf+0x1c>
     c92:	fa f4       	brpl	.+62     	; 0xcd2 <__floatsisf+0x6c>
     c94:	bb 0f       	add	r27, r27
     c96:	11 f4       	brne	.+4      	; 0xc9c <__floatsisf+0x36>
     c98:	60 ff       	sbrs	r22, 0
     c9a:	1b c0       	rjmp	.+54     	; 0xcd2 <__floatsisf+0x6c>
     c9c:	6f 5f       	subi	r22, 0xFF	; 255
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	8f 4f       	sbci	r24, 0xFF	; 255
     ca2:	9f 4f       	sbci	r25, 0xFF	; 255
     ca4:	16 c0       	rjmp	.+44     	; 0xcd2 <__floatsisf+0x6c>
     ca6:	88 23       	and	r24, r24
     ca8:	11 f0       	breq	.+4      	; 0xcae <__floatsisf+0x48>
     caa:	96 e9       	ldi	r25, 0x96	; 150
     cac:	11 c0       	rjmp	.+34     	; 0xcd0 <__floatsisf+0x6a>
     cae:	77 23       	and	r23, r23
     cb0:	21 f0       	breq	.+8      	; 0xcba <__floatsisf+0x54>
     cb2:	9e e8       	ldi	r25, 0x8E	; 142
     cb4:	87 2f       	mov	r24, r23
     cb6:	76 2f       	mov	r23, r22
     cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <__floatsisf+0x5e>
     cba:	66 23       	and	r22, r22
     cbc:	71 f0       	breq	.+28     	; 0xcda <__floatsisf+0x74>
     cbe:	96 e8       	ldi	r25, 0x86	; 134
     cc0:	86 2f       	mov	r24, r22
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	2a f0       	brmi	.+10     	; 0xcd2 <__floatsisf+0x6c>
     cc8:	9a 95       	dec	r25
     cca:	66 0f       	add	r22, r22
     ccc:	77 1f       	adc	r23, r23
     cce:	88 1f       	adc	r24, r24
     cd0:	da f7       	brpl	.-10     	; 0xcc8 <__floatsisf+0x62>
     cd2:	88 0f       	add	r24, r24
     cd4:	96 95       	lsr	r25
     cd6:	87 95       	ror	r24
     cd8:	97 f9       	bld	r25, 7
     cda:	08 95       	ret

00000cdc <__fp_cmp>:
     cdc:	99 0f       	add	r25, r25
     cde:	00 08       	sbc	r0, r0
     ce0:	55 0f       	add	r21, r21
     ce2:	aa 0b       	sbc	r26, r26
     ce4:	e0 e8       	ldi	r30, 0x80	; 128
     ce6:	fe ef       	ldi	r31, 0xFE	; 254
     ce8:	16 16       	cp	r1, r22
     cea:	17 06       	cpc	r1, r23
     cec:	e8 07       	cpc	r30, r24
     cee:	f9 07       	cpc	r31, r25
     cf0:	c0 f0       	brcs	.+48     	; 0xd22 <__fp_cmp+0x46>
     cf2:	12 16       	cp	r1, r18
     cf4:	13 06       	cpc	r1, r19
     cf6:	e4 07       	cpc	r30, r20
     cf8:	f5 07       	cpc	r31, r21
     cfa:	98 f0       	brcs	.+38     	; 0xd22 <__fp_cmp+0x46>
     cfc:	62 1b       	sub	r22, r18
     cfe:	73 0b       	sbc	r23, r19
     d00:	84 0b       	sbc	r24, r20
     d02:	95 0b       	sbc	r25, r21
     d04:	39 f4       	brne	.+14     	; 0xd14 <__fp_cmp+0x38>
     d06:	0a 26       	eor	r0, r26
     d08:	61 f0       	breq	.+24     	; 0xd22 <__fp_cmp+0x46>
     d0a:	23 2b       	or	r18, r19
     d0c:	24 2b       	or	r18, r20
     d0e:	25 2b       	or	r18, r21
     d10:	21 f4       	brne	.+8      	; 0xd1a <__fp_cmp+0x3e>
     d12:	08 95       	ret
     d14:	0a 26       	eor	r0, r26
     d16:	09 f4       	brne	.+2      	; 0xd1a <__fp_cmp+0x3e>
     d18:	a1 40       	sbci	r26, 0x01	; 1
     d1a:	a6 95       	lsr	r26
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	81 1d       	adc	r24, r1
     d20:	81 1d       	adc	r24, r1
     d22:	08 95       	ret

00000d24 <__fp_inf>:
     d24:	97 f9       	bld	r25, 7
     d26:	9f 67       	ori	r25, 0x7F	; 127
     d28:	80 e8       	ldi	r24, 0x80	; 128
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	08 95       	ret

00000d30 <__fp_nan>:
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	80 ec       	ldi	r24, 0xC0	; 192
     d34:	08 95       	ret

00000d36 <__fp_pscA>:
     d36:	00 24       	eor	r0, r0
     d38:	0a 94       	dec	r0
     d3a:	16 16       	cp	r1, r22
     d3c:	17 06       	cpc	r1, r23
     d3e:	18 06       	cpc	r1, r24
     d40:	09 06       	cpc	r0, r25
     d42:	08 95       	ret

00000d44 <__fp_pscB>:
     d44:	00 24       	eor	r0, r0
     d46:	0a 94       	dec	r0
     d48:	12 16       	cp	r1, r18
     d4a:	13 06       	cpc	r1, r19
     d4c:	14 06       	cpc	r1, r20
     d4e:	05 06       	cpc	r0, r21
     d50:	08 95       	ret

00000d52 <__fp_round>:
     d52:	09 2e       	mov	r0, r25
     d54:	03 94       	inc	r0
     d56:	00 0c       	add	r0, r0
     d58:	11 f4       	brne	.+4      	; 0xd5e <__fp_round+0xc>
     d5a:	88 23       	and	r24, r24
     d5c:	52 f0       	brmi	.+20     	; 0xd72 <__fp_round+0x20>
     d5e:	bb 0f       	add	r27, r27
     d60:	40 f4       	brcc	.+16     	; 0xd72 <__fp_round+0x20>
     d62:	bf 2b       	or	r27, r31
     d64:	11 f4       	brne	.+4      	; 0xd6a <__fp_round+0x18>
     d66:	60 ff       	sbrs	r22, 0
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <__fp_round+0x20>
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	8f 4f       	sbci	r24, 0xFF	; 255
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	08 95       	ret

00000d74 <__fp_split3>:
     d74:	57 fd       	sbrc	r21, 7
     d76:	90 58       	subi	r25, 0x80	; 128
     d78:	44 0f       	add	r20, r20
     d7a:	55 1f       	adc	r21, r21
     d7c:	59 f0       	breq	.+22     	; 0xd94 <__fp_splitA+0x10>
     d7e:	5f 3f       	cpi	r21, 0xFF	; 255
     d80:	71 f0       	breq	.+28     	; 0xd9e <__fp_splitA+0x1a>
     d82:	47 95       	ror	r20

00000d84 <__fp_splitA>:
     d84:	88 0f       	add	r24, r24
     d86:	97 fb       	bst	r25, 7
     d88:	99 1f       	adc	r25, r25
     d8a:	61 f0       	breq	.+24     	; 0xda4 <__fp_splitA+0x20>
     d8c:	9f 3f       	cpi	r25, 0xFF	; 255
     d8e:	79 f0       	breq	.+30     	; 0xdae <__fp_splitA+0x2a>
     d90:	87 95       	ror	r24
     d92:	08 95       	ret
     d94:	12 16       	cp	r1, r18
     d96:	13 06       	cpc	r1, r19
     d98:	14 06       	cpc	r1, r20
     d9a:	55 1f       	adc	r21, r21
     d9c:	f2 cf       	rjmp	.-28     	; 0xd82 <__fp_split3+0xe>
     d9e:	46 95       	lsr	r20
     da0:	f1 df       	rcall	.-30     	; 0xd84 <__fp_splitA>
     da2:	08 c0       	rjmp	.+16     	; 0xdb4 <__fp_splitA+0x30>
     da4:	16 16       	cp	r1, r22
     da6:	17 06       	cpc	r1, r23
     da8:	18 06       	cpc	r1, r24
     daa:	99 1f       	adc	r25, r25
     dac:	f1 cf       	rjmp	.-30     	; 0xd90 <__fp_splitA+0xc>
     dae:	86 95       	lsr	r24
     db0:	71 05       	cpc	r23, r1
     db2:	61 05       	cpc	r22, r1
     db4:	08 94       	sec
     db6:	08 95       	ret

00000db8 <__fp_zero>:
     db8:	e8 94       	clt

00000dba <__fp_szero>:
     dba:	bb 27       	eor	r27, r27
     dbc:	66 27       	eor	r22, r22
     dbe:	77 27       	eor	r23, r23
     dc0:	cb 01       	movw	r24, r22
     dc2:	97 f9       	bld	r25, 7
     dc4:	08 95       	ret

00000dc6 <__mulsf3>:
     dc6:	0e 94 f6 06 	call	0xdec	; 0xdec <__mulsf3x>
     dca:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_round>
     dce:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fp_pscA>
     dd2:	38 f0       	brcs	.+14     	; 0xde2 <__mulsf3+0x1c>
     dd4:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fp_pscB>
     dd8:	20 f0       	brcs	.+8      	; 0xde2 <__mulsf3+0x1c>
     dda:	95 23       	and	r25, r21
     ddc:	11 f0       	breq	.+4      	; 0xde2 <__mulsf3+0x1c>
     dde:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_inf>
     de2:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_nan>
     de6:	11 24       	eor	r1, r1
     de8:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_szero>

00000dec <__mulsf3x>:
     dec:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_split3>
     df0:	70 f3       	brcs	.-36     	; 0xdce <__mulsf3+0x8>

00000df2 <__mulsf3_pse>:
     df2:	95 9f       	mul	r25, r21
     df4:	c1 f3       	breq	.-16     	; 0xde6 <__mulsf3+0x20>
     df6:	95 0f       	add	r25, r21
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	55 1f       	adc	r21, r21
     dfc:	62 9f       	mul	r22, r18
     dfe:	f0 01       	movw	r30, r0
     e00:	72 9f       	mul	r23, r18
     e02:	bb 27       	eor	r27, r27
     e04:	f0 0d       	add	r31, r0
     e06:	b1 1d       	adc	r27, r1
     e08:	63 9f       	mul	r22, r19
     e0a:	aa 27       	eor	r26, r26
     e0c:	f0 0d       	add	r31, r0
     e0e:	b1 1d       	adc	r27, r1
     e10:	aa 1f       	adc	r26, r26
     e12:	64 9f       	mul	r22, r20
     e14:	66 27       	eor	r22, r22
     e16:	b0 0d       	add	r27, r0
     e18:	a1 1d       	adc	r26, r1
     e1a:	66 1f       	adc	r22, r22
     e1c:	82 9f       	mul	r24, r18
     e1e:	22 27       	eor	r18, r18
     e20:	b0 0d       	add	r27, r0
     e22:	a1 1d       	adc	r26, r1
     e24:	62 1f       	adc	r22, r18
     e26:	73 9f       	mul	r23, r19
     e28:	b0 0d       	add	r27, r0
     e2a:	a1 1d       	adc	r26, r1
     e2c:	62 1f       	adc	r22, r18
     e2e:	83 9f       	mul	r24, r19
     e30:	a0 0d       	add	r26, r0
     e32:	61 1d       	adc	r22, r1
     e34:	22 1f       	adc	r18, r18
     e36:	74 9f       	mul	r23, r20
     e38:	33 27       	eor	r19, r19
     e3a:	a0 0d       	add	r26, r0
     e3c:	61 1d       	adc	r22, r1
     e3e:	23 1f       	adc	r18, r19
     e40:	84 9f       	mul	r24, r20
     e42:	60 0d       	add	r22, r0
     e44:	21 1d       	adc	r18, r1
     e46:	82 2f       	mov	r24, r18
     e48:	76 2f       	mov	r23, r22
     e4a:	6a 2f       	mov	r22, r26
     e4c:	11 24       	eor	r1, r1
     e4e:	9f 57       	subi	r25, 0x7F	; 127
     e50:	50 40       	sbci	r21, 0x00	; 0
     e52:	9a f0       	brmi	.+38     	; 0xe7a <__mulsf3_pse+0x88>
     e54:	f1 f0       	breq	.+60     	; 0xe92 <__mulsf3_pse+0xa0>
     e56:	88 23       	and	r24, r24
     e58:	4a f0       	brmi	.+18     	; 0xe6c <__mulsf3_pse+0x7a>
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	bb 1f       	adc	r27, r27
     e60:	66 1f       	adc	r22, r22
     e62:	77 1f       	adc	r23, r23
     e64:	88 1f       	adc	r24, r24
     e66:	91 50       	subi	r25, 0x01	; 1
     e68:	50 40       	sbci	r21, 0x00	; 0
     e6a:	a9 f7       	brne	.-22     	; 0xe56 <__mulsf3_pse+0x64>
     e6c:	9e 3f       	cpi	r25, 0xFE	; 254
     e6e:	51 05       	cpc	r21, r1
     e70:	80 f0       	brcs	.+32     	; 0xe92 <__mulsf3_pse+0xa0>
     e72:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_inf>
     e76:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_szero>
     e7a:	5f 3f       	cpi	r21, 0xFF	; 255
     e7c:	e4 f3       	brlt	.-8      	; 0xe76 <__mulsf3_pse+0x84>
     e7e:	98 3e       	cpi	r25, 0xE8	; 232
     e80:	d4 f3       	brlt	.-12     	; 0xe76 <__mulsf3_pse+0x84>
     e82:	86 95       	lsr	r24
     e84:	77 95       	ror	r23
     e86:	67 95       	ror	r22
     e88:	b7 95       	ror	r27
     e8a:	f7 95       	ror	r31
     e8c:	e7 95       	ror	r30
     e8e:	9f 5f       	subi	r25, 0xFF	; 255
     e90:	c1 f7       	brne	.-16     	; 0xe82 <__mulsf3_pse+0x90>
     e92:	fe 2b       	or	r31, r30
     e94:	88 0f       	add	r24, r24
     e96:	91 1d       	adc	r25, r1
     e98:	96 95       	lsr	r25
     e9a:	87 95       	ror	r24
     e9c:	97 f9       	bld	r25, 7
     e9e:	08 95       	ret

00000ea0 <__divmodhi4>:
     ea0:	97 fb       	bst	r25, 7
     ea2:	07 2e       	mov	r0, r23
     ea4:	16 f4       	brtc	.+4      	; 0xeaa <__divmodhi4+0xa>
     ea6:	00 94       	com	r0
     ea8:	07 d0       	rcall	.+14     	; 0xeb8 <__divmodhi4_neg1>
     eaa:	77 fd       	sbrc	r23, 7
     eac:	09 d0       	rcall	.+18     	; 0xec0 <__divmodhi4_neg2>
     eae:	0e 94 86 07 	call	0xf0c	; 0xf0c <__udivmodhi4>
     eb2:	07 fc       	sbrc	r0, 7
     eb4:	05 d0       	rcall	.+10     	; 0xec0 <__divmodhi4_neg2>
     eb6:	3e f4       	brtc	.+14     	; 0xec6 <__divmodhi4_exit>

00000eb8 <__divmodhi4_neg1>:
     eb8:	90 95       	com	r25
     eba:	81 95       	neg	r24
     ebc:	9f 4f       	sbci	r25, 0xFF	; 255
     ebe:	08 95       	ret

00000ec0 <__divmodhi4_neg2>:
     ec0:	70 95       	com	r23
     ec2:	61 95       	neg	r22
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ec6 <__divmodhi4_exit>:
     ec6:	08 95       	ret

00000ec8 <__udivmodsi4>:
     ec8:	a1 e2       	ldi	r26, 0x21	; 33
     eca:	1a 2e       	mov	r1, r26
     ecc:	aa 1b       	sub	r26, r26
     ece:	bb 1b       	sub	r27, r27
     ed0:	fd 01       	movw	r30, r26
     ed2:	0d c0       	rjmp	.+26     	; 0xeee <__udivmodsi4_ep>

00000ed4 <__udivmodsi4_loop>:
     ed4:	aa 1f       	adc	r26, r26
     ed6:	bb 1f       	adc	r27, r27
     ed8:	ee 1f       	adc	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	a2 17       	cp	r26, r18
     ede:	b3 07       	cpc	r27, r19
     ee0:	e4 07       	cpc	r30, r20
     ee2:	f5 07       	cpc	r31, r21
     ee4:	20 f0       	brcs	.+8      	; 0xeee <__udivmodsi4_ep>
     ee6:	a2 1b       	sub	r26, r18
     ee8:	b3 0b       	sbc	r27, r19
     eea:	e4 0b       	sbc	r30, r20
     eec:	f5 0b       	sbc	r31, r21

00000eee <__udivmodsi4_ep>:
     eee:	66 1f       	adc	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	88 1f       	adc	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	1a 94       	dec	r1
     ef8:	69 f7       	brne	.-38     	; 0xed4 <__udivmodsi4_loop>
     efa:	60 95       	com	r22
     efc:	70 95       	com	r23
     efe:	80 95       	com	r24
     f00:	90 95       	com	r25
     f02:	9b 01       	movw	r18, r22
     f04:	ac 01       	movw	r20, r24
     f06:	bd 01       	movw	r22, r26
     f08:	cf 01       	movw	r24, r30
     f0a:	08 95       	ret

00000f0c <__udivmodhi4>:
     f0c:	aa 1b       	sub	r26, r26
     f0e:	bb 1b       	sub	r27, r27
     f10:	51 e1       	ldi	r21, 0x11	; 17
     f12:	07 c0       	rjmp	.+14     	; 0xf22 <__udivmodhi4_ep>

00000f14 <__udivmodhi4_loop>:
     f14:	aa 1f       	adc	r26, r26
     f16:	bb 1f       	adc	r27, r27
     f18:	a6 17       	cp	r26, r22
     f1a:	b7 07       	cpc	r27, r23
     f1c:	10 f0       	brcs	.+4      	; 0xf22 <__udivmodhi4_ep>
     f1e:	a6 1b       	sub	r26, r22
     f20:	b7 0b       	sbc	r27, r23

00000f22 <__udivmodhi4_ep>:
     f22:	88 1f       	adc	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	5a 95       	dec	r21
     f28:	a9 f7       	brne	.-22     	; 0xf14 <__udivmodhi4_loop>
     f2a:	80 95       	com	r24
     f2c:	90 95       	com	r25
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	08 95       	ret

00000f34 <strcat>:
     f34:	fb 01       	movw	r30, r22
     f36:	dc 01       	movw	r26, r24
     f38:	0d 90       	ld	r0, X+
     f3a:	00 20       	and	r0, r0
     f3c:	e9 f7       	brne	.-6      	; 0xf38 <strcat+0x4>
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	01 90       	ld	r0, Z+
     f42:	0d 92       	st	X+, r0
     f44:	00 20       	and	r0, r0
     f46:	e1 f7       	brne	.-8      	; 0xf40 <strcat+0xc>
     f48:	08 95       	ret

00000f4a <__ltoa_ncheck>:
     f4a:	bb 27       	eor	r27, r27
     f4c:	2a 30       	cpi	r18, 0x0A	; 10
     f4e:	51 f4       	brne	.+20     	; 0xf64 <__ltoa_ncheck+0x1a>
     f50:	99 23       	and	r25, r25
     f52:	42 f4       	brpl	.+16     	; 0xf64 <__ltoa_ncheck+0x1a>
     f54:	bd e2       	ldi	r27, 0x2D	; 45
     f56:	90 95       	com	r25
     f58:	80 95       	com	r24
     f5a:	70 95       	com	r23
     f5c:	61 95       	neg	r22
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	8f 4f       	sbci	r24, 0xFF	; 255
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__ultoa_common>

00000f68 <__ultoa_ncheck>:
     f68:	bb 27       	eor	r27, r27

00000f6a <__ultoa_common>:
     f6a:	fa 01       	movw	r30, r20
     f6c:	a6 2f       	mov	r26, r22
     f6e:	62 17       	cp	r22, r18
     f70:	71 05       	cpc	r23, r1
     f72:	81 05       	cpc	r24, r1
     f74:	91 05       	cpc	r25, r1
     f76:	33 0b       	sbc	r19, r19
     f78:	30 fb       	bst	r19, 0
     f7a:	66 f0       	brts	.+24     	; 0xf94 <__ultoa_common+0x2a>
     f7c:	aa 27       	eor	r26, r26
     f7e:	66 0f       	add	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	88 1f       	adc	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	aa 1f       	adc	r26, r26
     f88:	a2 17       	cp	r26, r18
     f8a:	10 f0       	brcs	.+4      	; 0xf90 <__ultoa_common+0x26>
     f8c:	a2 1b       	sub	r26, r18
     f8e:	63 95       	inc	r22
     f90:	38 50       	subi	r19, 0x08	; 8
     f92:	a9 f7       	brne	.-22     	; 0xf7e <__ultoa_common+0x14>
     f94:	a0 5d       	subi	r26, 0xD0	; 208
     f96:	aa 33       	cpi	r26, 0x3A	; 58
     f98:	08 f0       	brcs	.+2      	; 0xf9c <__ultoa_common+0x32>
     f9a:	a9 5d       	subi	r26, 0xD9	; 217
     f9c:	a1 93       	st	Z+, r26
     f9e:	36 f7       	brtc	.-52     	; 0xf6c <__ultoa_common+0x2>
     fa0:	b1 11       	cpse	r27, r1
     fa2:	b1 93       	st	Z+, r27
     fa4:	10 82       	st	Z, r1
     fa6:	ca 01       	movw	r24, r20
     fa8:	0c 94 ef 09 	jmp	0x13de	; 0x13de <strrev>

00000fac <sprintf>:
     fac:	ae e0       	ldi	r26, 0x0E	; 14
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ec ed       	ldi	r30, 0xDC	; 220
     fb2:	f7 e0       	ldi	r31, 0x07	; 7
     fb4:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__prologue_saves__+0x1c>
     fb8:	0d 89       	ldd	r16, Y+21	; 0x15
     fba:	1e 89       	ldd	r17, Y+22	; 0x16
     fbc:	86 e0       	ldi	r24, 0x06	; 6
     fbe:	8c 83       	std	Y+4, r24	; 0x04
     fc0:	1a 83       	std	Y+2, r17	; 0x02
     fc2:	09 83       	std	Y+1, r16	; 0x01
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	9f e7       	ldi	r25, 0x7F	; 127
     fc8:	9e 83       	std	Y+6, r25	; 0x06
     fca:	8d 83       	std	Y+5, r24	; 0x05
     fcc:	ae 01       	movw	r20, r28
     fce:	47 5e       	subi	r20, 0xE7	; 231
     fd0:	5f 4f       	sbci	r21, 0xFF	; 255
     fd2:	6f 89       	ldd	r22, Y+23	; 0x17
     fd4:	78 8d       	ldd	r23, Y+24	; 0x18
     fd6:	ce 01       	movw	r24, r28
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	0e 94 f8 07 	call	0xff0	; 0xff0 <vfprintf>
     fde:	ef 81       	ldd	r30, Y+7	; 0x07
     fe0:	f8 85       	ldd	r31, Y+8	; 0x08
     fe2:	e0 0f       	add	r30, r16
     fe4:	f1 1f       	adc	r31, r17
     fe6:	10 82       	st	Z, r1
     fe8:	2e 96       	adiw	r28, 0x0e	; 14
     fea:	e4 e0       	ldi	r30, 0x04	; 4
     fec:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__epilogue_restores__+0x1c>

00000ff0 <vfprintf>:
     ff0:	ab e0       	ldi	r26, 0x0B	; 11
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee ef       	ldi	r30, 0xFE	; 254
     ff6:	f7 e0       	ldi	r31, 0x07	; 7
     ff8:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__prologue_saves__>
     ffc:	6c 01       	movw	r12, r24
     ffe:	7b 01       	movw	r14, r22
    1000:	8a 01       	movw	r16, r20
    1002:	fc 01       	movw	r30, r24
    1004:	17 82       	std	Z+7, r1	; 0x07
    1006:	16 82       	std	Z+6, r1	; 0x06
    1008:	83 81       	ldd	r24, Z+3	; 0x03
    100a:	81 ff       	sbrs	r24, 1
    100c:	cc c1       	rjmp	.+920    	; 0x13a6 <vfprintf+0x3b6>
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	3c 01       	movw	r6, r24
    1014:	f6 01       	movw	r30, r12
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	f7 01       	movw	r30, r14
    101a:	93 fd       	sbrc	r25, 3
    101c:	85 91       	lpm	r24, Z+
    101e:	93 ff       	sbrs	r25, 3
    1020:	81 91       	ld	r24, Z+
    1022:	7f 01       	movw	r14, r30
    1024:	88 23       	and	r24, r24
    1026:	09 f4       	brne	.+2      	; 0x102a <vfprintf+0x3a>
    1028:	ba c1       	rjmp	.+884    	; 0x139e <vfprintf+0x3ae>
    102a:	85 32       	cpi	r24, 0x25	; 37
    102c:	39 f4       	brne	.+14     	; 0x103c <vfprintf+0x4c>
    102e:	93 fd       	sbrc	r25, 3
    1030:	85 91       	lpm	r24, Z+
    1032:	93 ff       	sbrs	r25, 3
    1034:	81 91       	ld	r24, Z+
    1036:	7f 01       	movw	r14, r30
    1038:	85 32       	cpi	r24, 0x25	; 37
    103a:	29 f4       	brne	.+10     	; 0x1046 <vfprintf+0x56>
    103c:	b6 01       	movw	r22, r12
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 ff 09 	call	0x13fe	; 0x13fe <fputc>
    1044:	e7 cf       	rjmp	.-50     	; 0x1014 <vfprintf+0x24>
    1046:	91 2c       	mov	r9, r1
    1048:	21 2c       	mov	r2, r1
    104a:	31 2c       	mov	r3, r1
    104c:	ff e1       	ldi	r31, 0x1F	; 31
    104e:	f3 15       	cp	r31, r3
    1050:	d8 f0       	brcs	.+54     	; 0x1088 <vfprintf+0x98>
    1052:	8b 32       	cpi	r24, 0x2B	; 43
    1054:	79 f0       	breq	.+30     	; 0x1074 <vfprintf+0x84>
    1056:	38 f4       	brcc	.+14     	; 0x1066 <vfprintf+0x76>
    1058:	80 32       	cpi	r24, 0x20	; 32
    105a:	79 f0       	breq	.+30     	; 0x107a <vfprintf+0x8a>
    105c:	83 32       	cpi	r24, 0x23	; 35
    105e:	a1 f4       	brne	.+40     	; 0x1088 <vfprintf+0x98>
    1060:	23 2d       	mov	r18, r3
    1062:	20 61       	ori	r18, 0x10	; 16
    1064:	1d c0       	rjmp	.+58     	; 0x10a0 <vfprintf+0xb0>
    1066:	8d 32       	cpi	r24, 0x2D	; 45
    1068:	61 f0       	breq	.+24     	; 0x1082 <vfprintf+0x92>
    106a:	80 33       	cpi	r24, 0x30	; 48
    106c:	69 f4       	brne	.+26     	; 0x1088 <vfprintf+0x98>
    106e:	23 2d       	mov	r18, r3
    1070:	21 60       	ori	r18, 0x01	; 1
    1072:	16 c0       	rjmp	.+44     	; 0x10a0 <vfprintf+0xb0>
    1074:	83 2d       	mov	r24, r3
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	38 2e       	mov	r3, r24
    107a:	e3 2d       	mov	r30, r3
    107c:	e4 60       	ori	r30, 0x04	; 4
    107e:	3e 2e       	mov	r3, r30
    1080:	2a c0       	rjmp	.+84     	; 0x10d6 <vfprintf+0xe6>
    1082:	f3 2d       	mov	r31, r3
    1084:	f8 60       	ori	r31, 0x08	; 8
    1086:	1d c0       	rjmp	.+58     	; 0x10c2 <vfprintf+0xd2>
    1088:	37 fc       	sbrc	r3, 7
    108a:	2d c0       	rjmp	.+90     	; 0x10e6 <vfprintf+0xf6>
    108c:	20 ed       	ldi	r18, 0xD0	; 208
    108e:	28 0f       	add	r18, r24
    1090:	2a 30       	cpi	r18, 0x0A	; 10
    1092:	40 f0       	brcs	.+16     	; 0x10a4 <vfprintf+0xb4>
    1094:	8e 32       	cpi	r24, 0x2E	; 46
    1096:	b9 f4       	brne	.+46     	; 0x10c6 <vfprintf+0xd6>
    1098:	36 fc       	sbrc	r3, 6
    109a:	81 c1       	rjmp	.+770    	; 0x139e <vfprintf+0x3ae>
    109c:	23 2d       	mov	r18, r3
    109e:	20 64       	ori	r18, 0x40	; 64
    10a0:	32 2e       	mov	r3, r18
    10a2:	19 c0       	rjmp	.+50     	; 0x10d6 <vfprintf+0xe6>
    10a4:	36 fe       	sbrs	r3, 6
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <vfprintf+0xc4>
    10a8:	8a e0       	ldi	r24, 0x0A	; 10
    10aa:	98 9e       	mul	r9, r24
    10ac:	20 0d       	add	r18, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	92 2e       	mov	r9, r18
    10b2:	11 c0       	rjmp	.+34     	; 0x10d6 <vfprintf+0xe6>
    10b4:	ea e0       	ldi	r30, 0x0A	; 10
    10b6:	2e 9e       	mul	r2, r30
    10b8:	20 0d       	add	r18, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	22 2e       	mov	r2, r18
    10be:	f3 2d       	mov	r31, r3
    10c0:	f0 62       	ori	r31, 0x20	; 32
    10c2:	3f 2e       	mov	r3, r31
    10c4:	08 c0       	rjmp	.+16     	; 0x10d6 <vfprintf+0xe6>
    10c6:	8c 36       	cpi	r24, 0x6C	; 108
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <vfprintf+0xe2>
    10ca:	83 2d       	mov	r24, r3
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	38 2e       	mov	r3, r24
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <vfprintf+0xe6>
    10d2:	88 36       	cpi	r24, 0x68	; 104
    10d4:	41 f4       	brne	.+16     	; 0x10e6 <vfprintf+0xf6>
    10d6:	f7 01       	movw	r30, r14
    10d8:	93 fd       	sbrc	r25, 3
    10da:	85 91       	lpm	r24, Z+
    10dc:	93 ff       	sbrs	r25, 3
    10de:	81 91       	ld	r24, Z+
    10e0:	7f 01       	movw	r14, r30
    10e2:	81 11       	cpse	r24, r1
    10e4:	b3 cf       	rjmp	.-154    	; 0x104c <vfprintf+0x5c>
    10e6:	98 2f       	mov	r25, r24
    10e8:	9f 7d       	andi	r25, 0xDF	; 223
    10ea:	95 54       	subi	r25, 0x45	; 69
    10ec:	93 30       	cpi	r25, 0x03	; 3
    10ee:	28 f4       	brcc	.+10     	; 0x10fa <vfprintf+0x10a>
    10f0:	0c 5f       	subi	r16, 0xFC	; 252
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	9f e3       	ldi	r25, 0x3F	; 63
    10f6:	99 83       	std	Y+1, r25	; 0x01
    10f8:	0d c0       	rjmp	.+26     	; 0x1114 <vfprintf+0x124>
    10fa:	83 36       	cpi	r24, 0x63	; 99
    10fc:	31 f0       	breq	.+12     	; 0x110a <vfprintf+0x11a>
    10fe:	83 37       	cpi	r24, 0x73	; 115
    1100:	71 f0       	breq	.+28     	; 0x111e <vfprintf+0x12e>
    1102:	83 35       	cpi	r24, 0x53	; 83
    1104:	09 f0       	breq	.+2      	; 0x1108 <vfprintf+0x118>
    1106:	59 c0       	rjmp	.+178    	; 0x11ba <vfprintf+0x1ca>
    1108:	21 c0       	rjmp	.+66     	; 0x114c <vfprintf+0x15c>
    110a:	f8 01       	movw	r30, r16
    110c:	80 81       	ld	r24, Z
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	0e 5f       	subi	r16, 0xFE	; 254
    1112:	1f 4f       	sbci	r17, 0xFF	; 255
    1114:	88 24       	eor	r8, r8
    1116:	83 94       	inc	r8
    1118:	91 2c       	mov	r9, r1
    111a:	53 01       	movw	r10, r6
    111c:	13 c0       	rjmp	.+38     	; 0x1144 <vfprintf+0x154>
    111e:	28 01       	movw	r4, r16
    1120:	f2 e0       	ldi	r31, 0x02	; 2
    1122:	4f 0e       	add	r4, r31
    1124:	51 1c       	adc	r5, r1
    1126:	f8 01       	movw	r30, r16
    1128:	a0 80       	ld	r10, Z
    112a:	b1 80       	ldd	r11, Z+1	; 0x01
    112c:	36 fe       	sbrs	r3, 6
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <vfprintf+0x146>
    1130:	69 2d       	mov	r22, r9
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <vfprintf+0x14a>
    1136:	6f ef       	ldi	r22, 0xFF	; 255
    1138:	7f ef       	ldi	r23, 0xFF	; 255
    113a:	c5 01       	movw	r24, r10
    113c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <strnlen>
    1140:	4c 01       	movw	r8, r24
    1142:	82 01       	movw	r16, r4
    1144:	f3 2d       	mov	r31, r3
    1146:	ff 77       	andi	r31, 0x7F	; 127
    1148:	3f 2e       	mov	r3, r31
    114a:	16 c0       	rjmp	.+44     	; 0x1178 <vfprintf+0x188>
    114c:	28 01       	movw	r4, r16
    114e:	22 e0       	ldi	r18, 0x02	; 2
    1150:	42 0e       	add	r4, r18
    1152:	51 1c       	adc	r5, r1
    1154:	f8 01       	movw	r30, r16
    1156:	a0 80       	ld	r10, Z
    1158:	b1 80       	ldd	r11, Z+1	; 0x01
    115a:	36 fe       	sbrs	r3, 6
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <vfprintf+0x174>
    115e:	69 2d       	mov	r22, r9
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <vfprintf+0x178>
    1164:	6f ef       	ldi	r22, 0xFF	; 255
    1166:	7f ef       	ldi	r23, 0xFF	; 255
    1168:	c5 01       	movw	r24, r10
    116a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <strnlen_P>
    116e:	4c 01       	movw	r8, r24
    1170:	f3 2d       	mov	r31, r3
    1172:	f0 68       	ori	r31, 0x80	; 128
    1174:	3f 2e       	mov	r3, r31
    1176:	82 01       	movw	r16, r4
    1178:	33 fc       	sbrc	r3, 3
    117a:	1b c0       	rjmp	.+54     	; 0x11b2 <vfprintf+0x1c2>
    117c:	82 2d       	mov	r24, r2
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	88 16       	cp	r8, r24
    1182:	99 06       	cpc	r9, r25
    1184:	b0 f4       	brcc	.+44     	; 0x11b2 <vfprintf+0x1c2>
    1186:	b6 01       	movw	r22, r12
    1188:	80 e2       	ldi	r24, 0x20	; 32
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <fputc>
    1190:	2a 94       	dec	r2
    1192:	f4 cf       	rjmp	.-24     	; 0x117c <vfprintf+0x18c>
    1194:	f5 01       	movw	r30, r10
    1196:	37 fc       	sbrc	r3, 7
    1198:	85 91       	lpm	r24, Z+
    119a:	37 fe       	sbrs	r3, 7
    119c:	81 91       	ld	r24, Z+
    119e:	5f 01       	movw	r10, r30
    11a0:	b6 01       	movw	r22, r12
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <fputc>
    11a8:	21 10       	cpse	r2, r1
    11aa:	2a 94       	dec	r2
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	82 1a       	sub	r8, r18
    11b0:	91 08       	sbc	r9, r1
    11b2:	81 14       	cp	r8, r1
    11b4:	91 04       	cpc	r9, r1
    11b6:	71 f7       	brne	.-36     	; 0x1194 <vfprintf+0x1a4>
    11b8:	e8 c0       	rjmp	.+464    	; 0x138a <vfprintf+0x39a>
    11ba:	84 36       	cpi	r24, 0x64	; 100
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <vfprintf+0x1d2>
    11be:	89 36       	cpi	r24, 0x69	; 105
    11c0:	41 f5       	brne	.+80     	; 0x1212 <vfprintf+0x222>
    11c2:	f8 01       	movw	r30, r16
    11c4:	37 fe       	sbrs	r3, 7
    11c6:	07 c0       	rjmp	.+14     	; 0x11d6 <vfprintf+0x1e6>
    11c8:	60 81       	ld	r22, Z
    11ca:	71 81       	ldd	r23, Z+1	; 0x01
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	0c 5f       	subi	r16, 0xFC	; 252
    11d2:	1f 4f       	sbci	r17, 0xFF	; 255
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <vfprintf+0x1f6>
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	07 2e       	mov	r0, r23
    11dc:	00 0c       	add	r0, r0
    11de:	88 0b       	sbc	r24, r24
    11e0:	99 0b       	sbc	r25, r25
    11e2:	0e 5f       	subi	r16, 0xFE	; 254
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	f3 2d       	mov	r31, r3
    11e8:	ff 76       	andi	r31, 0x6F	; 111
    11ea:	3f 2e       	mov	r3, r31
    11ec:	97 ff       	sbrs	r25, 7
    11ee:	09 c0       	rjmp	.+18     	; 0x1202 <vfprintf+0x212>
    11f0:	90 95       	com	r25
    11f2:	80 95       	com	r24
    11f4:	70 95       	com	r23
    11f6:	61 95       	neg	r22
    11f8:	7f 4f       	sbci	r23, 0xFF	; 255
    11fa:	8f 4f       	sbci	r24, 0xFF	; 255
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	f0 68       	ori	r31, 0x80	; 128
    1200:	3f 2e       	mov	r3, r31
    1202:	2a e0       	ldi	r18, 0x0A	; 10
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	a3 01       	movw	r20, r6
    1208:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__ultoa_invert>
    120c:	88 2e       	mov	r8, r24
    120e:	86 18       	sub	r8, r6
    1210:	45 c0       	rjmp	.+138    	; 0x129c <vfprintf+0x2ac>
    1212:	85 37       	cpi	r24, 0x75	; 117
    1214:	31 f4       	brne	.+12     	; 0x1222 <vfprintf+0x232>
    1216:	23 2d       	mov	r18, r3
    1218:	2f 7e       	andi	r18, 0xEF	; 239
    121a:	b2 2e       	mov	r11, r18
    121c:	2a e0       	ldi	r18, 0x0A	; 10
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	25 c0       	rjmp	.+74     	; 0x126c <vfprintf+0x27c>
    1222:	93 2d       	mov	r25, r3
    1224:	99 7f       	andi	r25, 0xF9	; 249
    1226:	b9 2e       	mov	r11, r25
    1228:	8f 36       	cpi	r24, 0x6F	; 111
    122a:	c1 f0       	breq	.+48     	; 0x125c <vfprintf+0x26c>
    122c:	18 f4       	brcc	.+6      	; 0x1234 <vfprintf+0x244>
    122e:	88 35       	cpi	r24, 0x58	; 88
    1230:	79 f0       	breq	.+30     	; 0x1250 <vfprintf+0x260>
    1232:	b5 c0       	rjmp	.+362    	; 0x139e <vfprintf+0x3ae>
    1234:	80 37       	cpi	r24, 0x70	; 112
    1236:	19 f0       	breq	.+6      	; 0x123e <vfprintf+0x24e>
    1238:	88 37       	cpi	r24, 0x78	; 120
    123a:	21 f0       	breq	.+8      	; 0x1244 <vfprintf+0x254>
    123c:	b0 c0       	rjmp	.+352    	; 0x139e <vfprintf+0x3ae>
    123e:	e9 2f       	mov	r30, r25
    1240:	e0 61       	ori	r30, 0x10	; 16
    1242:	be 2e       	mov	r11, r30
    1244:	b4 fe       	sbrs	r11, 4
    1246:	0d c0       	rjmp	.+26     	; 0x1262 <vfprintf+0x272>
    1248:	fb 2d       	mov	r31, r11
    124a:	f4 60       	ori	r31, 0x04	; 4
    124c:	bf 2e       	mov	r11, r31
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <vfprintf+0x272>
    1250:	34 fe       	sbrs	r3, 4
    1252:	0a c0       	rjmp	.+20     	; 0x1268 <vfprintf+0x278>
    1254:	29 2f       	mov	r18, r25
    1256:	26 60       	ori	r18, 0x06	; 6
    1258:	b2 2e       	mov	r11, r18
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <vfprintf+0x278>
    125c:	28 e0       	ldi	r18, 0x08	; 8
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	05 c0       	rjmp	.+10     	; 0x126c <vfprintf+0x27c>
    1262:	20 e1       	ldi	r18, 0x10	; 16
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x27c>
    1268:	20 e1       	ldi	r18, 0x10	; 16
    126a:	32 e0       	ldi	r19, 0x02	; 2
    126c:	f8 01       	movw	r30, r16
    126e:	b7 fe       	sbrs	r11, 7
    1270:	07 c0       	rjmp	.+14     	; 0x1280 <vfprintf+0x290>
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	0c 5f       	subi	r16, 0xFC	; 252
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	06 c0       	rjmp	.+12     	; 0x128c <vfprintf+0x29c>
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 5f       	subi	r16, 0xFE	; 254
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
    128c:	a3 01       	movw	r20, r6
    128e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__ultoa_invert>
    1292:	88 2e       	mov	r8, r24
    1294:	86 18       	sub	r8, r6
    1296:	fb 2d       	mov	r31, r11
    1298:	ff 77       	andi	r31, 0x7F	; 127
    129a:	3f 2e       	mov	r3, r31
    129c:	36 fe       	sbrs	r3, 6
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <vfprintf+0x2ca>
    12a0:	23 2d       	mov	r18, r3
    12a2:	2e 7f       	andi	r18, 0xFE	; 254
    12a4:	a2 2e       	mov	r10, r18
    12a6:	89 14       	cp	r8, r9
    12a8:	58 f4       	brcc	.+22     	; 0x12c0 <vfprintf+0x2d0>
    12aa:	34 fe       	sbrs	r3, 4
    12ac:	0b c0       	rjmp	.+22     	; 0x12c4 <vfprintf+0x2d4>
    12ae:	32 fc       	sbrc	r3, 2
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <vfprintf+0x2d4>
    12b2:	83 2d       	mov	r24, r3
    12b4:	8e 7e       	andi	r24, 0xEE	; 238
    12b6:	a8 2e       	mov	r10, r24
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <vfprintf+0x2d4>
    12ba:	b8 2c       	mov	r11, r8
    12bc:	a3 2c       	mov	r10, r3
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <vfprintf+0x2d6>
    12c0:	b8 2c       	mov	r11, r8
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <vfprintf+0x2d6>
    12c4:	b9 2c       	mov	r11, r9
    12c6:	a4 fe       	sbrs	r10, 4
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <vfprintf+0x2f8>
    12ca:	fe 01       	movw	r30, r28
    12cc:	e8 0d       	add	r30, r8
    12ce:	f1 1d       	adc	r31, r1
    12d0:	80 81       	ld	r24, Z
    12d2:	80 33       	cpi	r24, 0x30	; 48
    12d4:	21 f4       	brne	.+8      	; 0x12de <vfprintf+0x2ee>
    12d6:	9a 2d       	mov	r25, r10
    12d8:	99 7e       	andi	r25, 0xE9	; 233
    12da:	a9 2e       	mov	r10, r25
    12dc:	09 c0       	rjmp	.+18     	; 0x12f0 <vfprintf+0x300>
    12de:	a2 fe       	sbrs	r10, 2
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <vfprintf+0x2fe>
    12e2:	b3 94       	inc	r11
    12e4:	b3 94       	inc	r11
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <vfprintf+0x300>
    12e8:	8a 2d       	mov	r24, r10
    12ea:	86 78       	andi	r24, 0x86	; 134
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <vfprintf+0x300>
    12ee:	b3 94       	inc	r11
    12f0:	a3 fc       	sbrc	r10, 3
    12f2:	11 c0       	rjmp	.+34     	; 0x1316 <vfprintf+0x326>
    12f4:	a0 fe       	sbrs	r10, 0
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <vfprintf+0x314>
    12f8:	b2 14       	cp	r11, r2
    12fa:	88 f4       	brcc	.+34     	; 0x131e <vfprintf+0x32e>
    12fc:	28 0c       	add	r2, r8
    12fe:	92 2c       	mov	r9, r2
    1300:	9b 18       	sub	r9, r11
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <vfprintf+0x330>
    1304:	b2 14       	cp	r11, r2
    1306:	60 f4       	brcc	.+24     	; 0x1320 <vfprintf+0x330>
    1308:	b6 01       	movw	r22, r12
    130a:	80 e2       	ldi	r24, 0x20	; 32
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <fputc>
    1312:	b3 94       	inc	r11
    1314:	f7 cf       	rjmp	.-18     	; 0x1304 <vfprintf+0x314>
    1316:	b2 14       	cp	r11, r2
    1318:	18 f4       	brcc	.+6      	; 0x1320 <vfprintf+0x330>
    131a:	2b 18       	sub	r2, r11
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <vfprintf+0x332>
    131e:	98 2c       	mov	r9, r8
    1320:	21 2c       	mov	r2, r1
    1322:	a4 fe       	sbrs	r10, 4
    1324:	10 c0       	rjmp	.+32     	; 0x1346 <vfprintf+0x356>
    1326:	b6 01       	movw	r22, r12
    1328:	80 e3       	ldi	r24, 0x30	; 48
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <fputc>
    1330:	a2 fe       	sbrs	r10, 2
    1332:	17 c0       	rjmp	.+46     	; 0x1362 <vfprintf+0x372>
    1334:	a1 fc       	sbrc	r10, 1
    1336:	03 c0       	rjmp	.+6      	; 0x133e <vfprintf+0x34e>
    1338:	88 e7       	ldi	r24, 0x78	; 120
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <vfprintf+0x352>
    133e:	88 e5       	ldi	r24, 0x58	; 88
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	b6 01       	movw	r22, r12
    1344:	0c c0       	rjmp	.+24     	; 0x135e <vfprintf+0x36e>
    1346:	8a 2d       	mov	r24, r10
    1348:	86 78       	andi	r24, 0x86	; 134
    134a:	59 f0       	breq	.+22     	; 0x1362 <vfprintf+0x372>
    134c:	a1 fe       	sbrs	r10, 1
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x364>
    1350:	8b e2       	ldi	r24, 0x2B	; 43
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <vfprintf+0x366>
    1354:	80 e2       	ldi	r24, 0x20	; 32
    1356:	a7 fc       	sbrc	r10, 7
    1358:	8d e2       	ldi	r24, 0x2D	; 45
    135a:	b6 01       	movw	r22, r12
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <fputc>
    1362:	89 14       	cp	r8, r9
    1364:	38 f4       	brcc	.+14     	; 0x1374 <vfprintf+0x384>
    1366:	b6 01       	movw	r22, r12
    1368:	80 e3       	ldi	r24, 0x30	; 48
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <fputc>
    1370:	9a 94       	dec	r9
    1372:	f7 cf       	rjmp	.-18     	; 0x1362 <vfprintf+0x372>
    1374:	8a 94       	dec	r8
    1376:	f3 01       	movw	r30, r6
    1378:	e8 0d       	add	r30, r8
    137a:	f1 1d       	adc	r31, r1
    137c:	80 81       	ld	r24, Z
    137e:	b6 01       	movw	r22, r12
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 ff 09 	call	0x13fe	; 0x13fe <fputc>
    1386:	81 10       	cpse	r8, r1
    1388:	f5 cf       	rjmp	.-22     	; 0x1374 <vfprintf+0x384>
    138a:	22 20       	and	r2, r2
    138c:	09 f4       	brne	.+2      	; 0x1390 <vfprintf+0x3a0>
    138e:	42 ce       	rjmp	.-892    	; 0x1014 <vfprintf+0x24>
    1390:	b6 01       	movw	r22, r12
    1392:	80 e2       	ldi	r24, 0x20	; 32
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 ff 09 	call	0x13fe	; 0x13fe <fputc>
    139a:	2a 94       	dec	r2
    139c:	f6 cf       	rjmp	.-20     	; 0x138a <vfprintf+0x39a>
    139e:	f6 01       	movw	r30, r12
    13a0:	86 81       	ldd	r24, Z+6	; 0x06
    13a2:	97 81       	ldd	r25, Z+7	; 0x07
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <vfprintf+0x3ba>
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	9f ef       	ldi	r25, 0xFF	; 255
    13aa:	2b 96       	adiw	r28, 0x0b	; 11
    13ac:	e2 e1       	ldi	r30, 0x12	; 18
    13ae:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__epilogue_restores__>

000013b2 <strnlen_P>:
    13b2:	fc 01       	movw	r30, r24
    13b4:	05 90       	lpm	r0, Z+
    13b6:	61 50       	subi	r22, 0x01	; 1
    13b8:	70 40       	sbci	r23, 0x00	; 0
    13ba:	01 10       	cpse	r0, r1
    13bc:	d8 f7       	brcc	.-10     	; 0x13b4 <strnlen_P+0x2>
    13be:	80 95       	com	r24
    13c0:	90 95       	com	r25
    13c2:	8e 0f       	add	r24, r30
    13c4:	9f 1f       	adc	r25, r31
    13c6:	08 95       	ret

000013c8 <strnlen>:
    13c8:	fc 01       	movw	r30, r24
    13ca:	61 50       	subi	r22, 0x01	; 1
    13cc:	70 40       	sbci	r23, 0x00	; 0
    13ce:	01 90       	ld	r0, Z+
    13d0:	01 10       	cpse	r0, r1
    13d2:	d8 f7       	brcc	.-10     	; 0x13ca <strnlen+0x2>
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	8e 0f       	add	r24, r30
    13da:	9f 1f       	adc	r25, r31
    13dc:	08 95       	ret

000013de <strrev>:
    13de:	dc 01       	movw	r26, r24
    13e0:	fc 01       	movw	r30, r24
    13e2:	67 2f       	mov	r22, r23
    13e4:	71 91       	ld	r23, Z+
    13e6:	77 23       	and	r23, r23
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <strrev+0x4>
    13ea:	32 97       	sbiw	r30, 0x02	; 2
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <strrev+0x18>
    13ee:	7c 91       	ld	r23, X
    13f0:	6d 93       	st	X+, r22
    13f2:	70 83       	st	Z, r23
    13f4:	62 91       	ld	r22, -Z
    13f6:	ae 17       	cp	r26, r30
    13f8:	bf 07       	cpc	r27, r31
    13fa:	c8 f3       	brcs	.-14     	; 0x13ee <strrev+0x10>
    13fc:	08 95       	ret

000013fe <fputc>:
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	fb 01       	movw	r30, r22
    1408:	23 81       	ldd	r18, Z+3	; 0x03
    140a:	21 fd       	sbrc	r18, 1
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <fputc+0x16>
    140e:	8f ef       	ldi	r24, 0xFF	; 255
    1410:	9f ef       	ldi	r25, 0xFF	; 255
    1412:	2c c0       	rjmp	.+88     	; 0x146c <fputc+0x6e>
    1414:	22 ff       	sbrs	r18, 2
    1416:	16 c0       	rjmp	.+44     	; 0x1444 <fputc+0x46>
    1418:	46 81       	ldd	r20, Z+6	; 0x06
    141a:	57 81       	ldd	r21, Z+7	; 0x07
    141c:	24 81       	ldd	r18, Z+4	; 0x04
    141e:	35 81       	ldd	r19, Z+5	; 0x05
    1420:	42 17       	cp	r20, r18
    1422:	53 07       	cpc	r21, r19
    1424:	44 f4       	brge	.+16     	; 0x1436 <fputc+0x38>
    1426:	a0 81       	ld	r26, Z
    1428:	b1 81       	ldd	r27, Z+1	; 0x01
    142a:	9d 01       	movw	r18, r26
    142c:	2f 5f       	subi	r18, 0xFF	; 255
    142e:	3f 4f       	sbci	r19, 0xFF	; 255
    1430:	31 83       	std	Z+1, r19	; 0x01
    1432:	20 83       	st	Z, r18
    1434:	8c 93       	st	X, r24
    1436:	26 81       	ldd	r18, Z+6	; 0x06
    1438:	37 81       	ldd	r19, Z+7	; 0x07
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	37 83       	std	Z+7, r19	; 0x07
    1440:	26 83       	std	Z+6, r18	; 0x06
    1442:	14 c0       	rjmp	.+40     	; 0x146c <fputc+0x6e>
    1444:	8b 01       	movw	r16, r22
    1446:	ec 01       	movw	r28, r24
    1448:	fb 01       	movw	r30, r22
    144a:	00 84       	ldd	r0, Z+8	; 0x08
    144c:	f1 85       	ldd	r31, Z+9	; 0x09
    144e:	e0 2d       	mov	r30, r0
    1450:	09 95       	icall
    1452:	89 2b       	or	r24, r25
    1454:	e1 f6       	brne	.-72     	; 0x140e <fputc+0x10>
    1456:	d8 01       	movw	r26, r16
    1458:	16 96       	adiw	r26, 0x06	; 6
    145a:	8d 91       	ld	r24, X+
    145c:	9c 91       	ld	r25, X
    145e:	17 97       	sbiw	r26, 0x07	; 7
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	17 96       	adiw	r26, 0x07	; 7
    1464:	9c 93       	st	X, r25
    1466:	8e 93       	st	-X, r24
    1468:	16 97       	sbiw	r26, 0x06	; 6
    146a:	ce 01       	movw	r24, r28
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	08 95       	ret

00001476 <__ultoa_invert>:
    1476:	fa 01       	movw	r30, r20
    1478:	aa 27       	eor	r26, r26
    147a:	28 30       	cpi	r18, 0x08	; 8
    147c:	51 f1       	breq	.+84     	; 0x14d2 <__ultoa_invert+0x5c>
    147e:	20 31       	cpi	r18, 0x10	; 16
    1480:	81 f1       	breq	.+96     	; 0x14e2 <__ultoa_invert+0x6c>
    1482:	e8 94       	clt
    1484:	6f 93       	push	r22
    1486:	6e 7f       	andi	r22, 0xFE	; 254
    1488:	6e 5f       	subi	r22, 0xFE	; 254
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	8f 4f       	sbci	r24, 0xFF	; 255
    148e:	9f 4f       	sbci	r25, 0xFF	; 255
    1490:	af 4f       	sbci	r26, 0xFF	; 255
    1492:	b1 e0       	ldi	r27, 0x01	; 1
    1494:	3e d0       	rcall	.+124    	; 0x1512 <__ultoa_invert+0x9c>
    1496:	b4 e0       	ldi	r27, 0x04	; 4
    1498:	3c d0       	rcall	.+120    	; 0x1512 <__ultoa_invert+0x9c>
    149a:	67 0f       	add	r22, r23
    149c:	78 1f       	adc	r23, r24
    149e:	89 1f       	adc	r24, r25
    14a0:	9a 1f       	adc	r25, r26
    14a2:	a1 1d       	adc	r26, r1
    14a4:	68 0f       	add	r22, r24
    14a6:	79 1f       	adc	r23, r25
    14a8:	8a 1f       	adc	r24, r26
    14aa:	91 1d       	adc	r25, r1
    14ac:	a1 1d       	adc	r26, r1
    14ae:	6a 0f       	add	r22, r26
    14b0:	71 1d       	adc	r23, r1
    14b2:	81 1d       	adc	r24, r1
    14b4:	91 1d       	adc	r25, r1
    14b6:	a1 1d       	adc	r26, r1
    14b8:	20 d0       	rcall	.+64     	; 0x14fa <__ultoa_invert+0x84>
    14ba:	09 f4       	brne	.+2      	; 0x14be <__ultoa_invert+0x48>
    14bc:	68 94       	set
    14be:	3f 91       	pop	r19
    14c0:	2a e0       	ldi	r18, 0x0A	; 10
    14c2:	26 9f       	mul	r18, r22
    14c4:	11 24       	eor	r1, r1
    14c6:	30 19       	sub	r19, r0
    14c8:	30 5d       	subi	r19, 0xD0	; 208
    14ca:	31 93       	st	Z+, r19
    14cc:	de f6       	brtc	.-74     	; 0x1484 <__ultoa_invert+0xe>
    14ce:	cf 01       	movw	r24, r30
    14d0:	08 95       	ret
    14d2:	46 2f       	mov	r20, r22
    14d4:	47 70       	andi	r20, 0x07	; 7
    14d6:	40 5d       	subi	r20, 0xD0	; 208
    14d8:	41 93       	st	Z+, r20
    14da:	b3 e0       	ldi	r27, 0x03	; 3
    14dc:	0f d0       	rcall	.+30     	; 0x14fc <__ultoa_invert+0x86>
    14de:	c9 f7       	brne	.-14     	; 0x14d2 <__ultoa_invert+0x5c>
    14e0:	f6 cf       	rjmp	.-20     	; 0x14ce <__ultoa_invert+0x58>
    14e2:	46 2f       	mov	r20, r22
    14e4:	4f 70       	andi	r20, 0x0F	; 15
    14e6:	40 5d       	subi	r20, 0xD0	; 208
    14e8:	4a 33       	cpi	r20, 0x3A	; 58
    14ea:	18 f0       	brcs	.+6      	; 0x14f2 <__ultoa_invert+0x7c>
    14ec:	49 5d       	subi	r20, 0xD9	; 217
    14ee:	31 fd       	sbrc	r19, 1
    14f0:	40 52       	subi	r20, 0x20	; 32
    14f2:	41 93       	st	Z+, r20
    14f4:	02 d0       	rcall	.+4      	; 0x14fa <__ultoa_invert+0x84>
    14f6:	a9 f7       	brne	.-22     	; 0x14e2 <__ultoa_invert+0x6c>
    14f8:	ea cf       	rjmp	.-44     	; 0x14ce <__ultoa_invert+0x58>
    14fa:	b4 e0       	ldi	r27, 0x04	; 4
    14fc:	a6 95       	lsr	r26
    14fe:	97 95       	ror	r25
    1500:	87 95       	ror	r24
    1502:	77 95       	ror	r23
    1504:	67 95       	ror	r22
    1506:	ba 95       	dec	r27
    1508:	c9 f7       	brne	.-14     	; 0x14fc <__ultoa_invert+0x86>
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	61 05       	cpc	r22, r1
    150e:	71 05       	cpc	r23, r1
    1510:	08 95       	ret
    1512:	9b 01       	movw	r18, r22
    1514:	ac 01       	movw	r20, r24
    1516:	0a 2e       	mov	r0, r26
    1518:	06 94       	lsr	r0
    151a:	57 95       	ror	r21
    151c:	47 95       	ror	r20
    151e:	37 95       	ror	r19
    1520:	27 95       	ror	r18
    1522:	ba 95       	dec	r27
    1524:	c9 f7       	brne	.-14     	; 0x1518 <__ultoa_invert+0xa2>
    1526:	62 0f       	add	r22, r18
    1528:	73 1f       	adc	r23, r19
    152a:	84 1f       	adc	r24, r20
    152c:	95 1f       	adc	r25, r21
    152e:	a0 1d       	adc	r26, r0
    1530:	08 95       	ret

00001532 <__prologue_saves__>:
    1532:	2f 92       	push	r2
    1534:	3f 92       	push	r3
    1536:	4f 92       	push	r4
    1538:	5f 92       	push	r5
    153a:	6f 92       	push	r6
    153c:	7f 92       	push	r7
    153e:	8f 92       	push	r8
    1540:	9f 92       	push	r9
    1542:	af 92       	push	r10
    1544:	bf 92       	push	r11
    1546:	cf 92       	push	r12
    1548:	df 92       	push	r13
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	ca 1b       	sub	r28, r26
    155c:	db 0b       	sbc	r29, r27
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	09 94       	ijmp

0000156a <__epilogue_restores__>:
    156a:	2a 88       	ldd	r2, Y+18	; 0x12
    156c:	39 88       	ldd	r3, Y+17	; 0x11
    156e:	48 88       	ldd	r4, Y+16	; 0x10
    1570:	5f 84       	ldd	r5, Y+15	; 0x0f
    1572:	6e 84       	ldd	r6, Y+14	; 0x0e
    1574:	7d 84       	ldd	r7, Y+13	; 0x0d
    1576:	8c 84       	ldd	r8, Y+12	; 0x0c
    1578:	9b 84       	ldd	r9, Y+11	; 0x0b
    157a:	aa 84       	ldd	r10, Y+10	; 0x0a
    157c:	b9 84       	ldd	r11, Y+9	; 0x09
    157e:	c8 84       	ldd	r12, Y+8	; 0x08
    1580:	df 80       	ldd	r13, Y+7	; 0x07
    1582:	ee 80       	ldd	r14, Y+6	; 0x06
    1584:	fd 80       	ldd	r15, Y+5	; 0x05
    1586:	0c 81       	ldd	r16, Y+4	; 0x04
    1588:	1b 81       	ldd	r17, Y+3	; 0x03
    158a:	aa 81       	ldd	r26, Y+2	; 0x02
    158c:	b9 81       	ldd	r27, Y+1	; 0x01
    158e:	ce 0f       	add	r28, r30
    1590:	d1 1d       	adc	r29, r1
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	ed 01       	movw	r28, r26
    159e:	08 95       	ret

000015a0 <_exit>:
    15a0:	f8 94       	cli

000015a2 <__stop_program>:
    15a2:	ff cf       	rjmp	.-2      	; 0x15a2 <__stop_program>
